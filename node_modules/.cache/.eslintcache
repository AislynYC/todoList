[{"/Users/dumbcan/Desktop/wemo/todo-app/src/components/Todo.js":"1","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/index.js":"2","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/reportWebVitals.js":"3","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/App.js":"4","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js":"5","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Header.js":"6","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js":"7","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/TodoItem.js":"8"},{"size":3770,"mtime":1623120611106,"results":"9","hashOfConfig":"10"},{"size":500,"mtime":1623131220736,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1623131220737,"results":"13","hashOfConfig":"12"},{"size":557,"mtime":1623244586646,"results":"14","hashOfConfig":"12"},{"size":10938,"mtime":1623570376411,"results":"15","hashOfConfig":"12"},{"size":554,"mtime":1623131220735,"results":"16","hashOfConfig":"12"},{"size":6065,"mtime":1623569178262,"results":"17","hashOfConfig":"12"},{"size":2064,"mtime":1623568548662,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1jpyqzi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"flow4s",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/dumbcan/Desktop/wemo/todo-app/src/components/Todo.js",["41","42","43"],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/index.js",[],["44","45"],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/reportWebVitals.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/App.js",["46","47"],"import React from 'react';\nimport './App.css';\n\nimport Todo from './components/Todo.js'\nimport Header from './components/Header.js'\n\nconst useStateWithLocalStorage = localStorageKey => {\n  const [value, setValue] = React.useState(\n    localStorage.getItem(localStorageKey) || ''\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(localStorageKey, value);\n  }, [value]);\n\n  return [value, setValue];\n};\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      \n      <Header></Header>\n\n      <Todo></Todo>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js",["48","49","50","51","52","53"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\nimport Checkbox from '@material-ui/core';\n\n\nfunction Todo() {\n\n    \n\n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n    const checkSaveAction = localStorage.getItem(\"saveAction\") === \"true\";\n    console.log(\"checkSaveAction: \", checkSaveAction);\n\n    \n    const [cards, setCards] = useState(cardsDefault);\n    const [key, setKey] = useState(1);                      // cardKey\n    const [removeState, setRemoveState] = useState(false);\n\n    const [saveList, setSaveList] = useState(true);\n\n\n    const updateLocal = () =>\n    {\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n        localStorage.setItem(\"saveAction\", saveList);\n        localStorage.setItem(\"cardKey\", key);\n        console.log(\"updateLocal done\");\n            \n    }\n\n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n    const addCard = () => \n    {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = Object.assign({}, cardsDefault[0]);\n        \n        /*  increment key by 1 */\n        setKey(prev => prev + 1);\n\n        setCards(tempCard);\n\n        updateLocal();\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n    const removeCard = (cardKey) => \n    { \n        /* Ensures only delete card when removeState is on */\n        console.log(\"removeCard cardKey: \", cardKey);\n\n        let tempCards = Object.assign({}, cards);\n           \n        delete tempCards[cardKey];\n        setCards(prev => prev = tempCards);\n            \n\n\n        updateLocal();\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n    }\n    \n    /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n    const updateCardName = (cardKey, cardName) => \n    {\n        let tempCards = Object.assign({}, cards);\n        console.log(\"before updateCardName: \", tempCards);\n\n        tempCards[cardKey].name = cardName;\n        console.log(\"after updateCardName: \", tempCards);\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs updateCardName: \", cards[cardKey].name );\n\n        updateLocal();\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => \n    {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs addTodoItem cards: \", cards);\n\n        updateLocal();\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n    \n   \n    /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n    const deleteTodoItem = async (cardKey, todoItemKey) => \n    {\n\n        /*  Only deletes the todoItem if the card has todoItemList > 1 */\n        if (Object.keys(cards[cardKey].todoList).length > 1) {\n            let tempCards = Object.assign({}, cards);\n            console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n            console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n\n            console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n            delete tempCards[cardKey].todoList[todoItemKey];\n            console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n\n            setCards(prev => prev = tempCards);\n            console.log(\"todoJs deleteTodoItem cards: \", cards);\n            console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n\n            updateLocal();\n\n            // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n\n        }\n        \n    }\n    /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessage = (cardKey, todoItemKey, message) => \n    {\n        let tempCards = Object.assign({}, cards);\n        \n        tempCards[cardKey].todoList[todoItemKey] = message;\n\n        setCards(prev => prev = tempCards);\n        \n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n        updateLocal();\n\n        // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n    }\n\n    useEffect(async() => \n    {\n       \n        if (checkSaveAction) {\n            await setCards(JSON.parse(localStorage.getItem(\"savedCards\")));\n            setKey(parseInt(localStorage.getItem(\"cardKey\")));\n            console.log(\"Todojs UseEffect key: \", key);\n            console.log(\"Todojs UseEffect localStorage key: \", localStorage.getItem(\"cardKey\"));\n\n        }\n        localStorage.setItem(\"saveAction\", saveList);\n\n        \n        \n    }, []);\n\n    useEffect(() => {\n\n       \n        const addCardButton = document.getElementById(\"addCardButton\");\n        const removeCardButton = document.getElementById(\"removeCardButton\");\n\n        \n        const updateRemoveState = () => \n        {\n            setRemoveState((prev) => !prev); \n        }\n        addCardButton.addEventListener(\"click\", addCard);\n        removeCardButton.addEventListener(\"click\", updateRemoveState);\n        \n        console.log(\"Todo UseEffeect cards: \" , cards);\n\n        return (() => \n        {\n            addCardButton.removeEventListener(\"click\", addCard);\n            removeCardButton.removeEventListener(\"click\", updateRemoveState);\n\n        });\n    }, [addCard])\n\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <div className={tStyle.editButtons}>\n                    <button className={tStyle.addEvent}\n                            // onClick={addCard}\n                            id=\"addCardButton\">\n                        ＋\n                    </button>\n                    <button className={tStyle.removeEvent}\n                            id=\"removeCardButton\"\n                            /* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */>\n                        －\n                    </button>\n                </div>\n                \n                <label className={tStyle.saveListContainer}>\n                    <input type=\"checkbox\" name=\"saveList\" className={tStyle.saveCheckbox} checked={saveList} onChange={() => {localStorage.setItem(\"saveAction\", !saveList); setSaveList((prev) => !prev);   }}/>\n                    Auto Save\n                </label>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        console.log(\"Todo.js cardKey: \", cardKey);\n                        console.log(\"todojs objecke: \", Object.keys(cards));\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}\n                                  deleteTodoItem={deleteTodoItem}\n                                  updateTodoItemMessage={updateTodoItemMessage}\n                                  updateCardName={updateCardName}>\n                                    \n                            </Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Header.js",["54","55"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Header.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\n\n\nimport hStyle from './style/Header.module.css';\n\n\nfunction Header() {\n\n\n\n\n    return (\n        <div className={hStyle.headerContainer}>\n            <div className={hStyle.headerName1} id=\"header1\">☑</div>\n            <div className={hStyle.headerName2} id=\"header2\">To</div>\n            <div className={hStyle.headerName3} id=\"header3\">Do</div>\n\n        </div>\n    );\n}\n\nexport default Header;\n","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js",["56","57","58","59","60","61"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Card.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect, useRef} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport TodoItem from '../components/TodoItem.js'\n\n\nimport cStyle from './style/Card.module.css';\n\n\nfunction Card(props) {\n    const {cardKey, card, addTodoItem, deleteTodoItem, removeCard, updateTodoItemMessage, updateCardName, removeState} = props;\n \n    \n    const removeCardID = useRef(null);\n    const cardRef = useRef(null);\n    const [cardName, setCardName] = useState(props.card.name);\n        \n    let inputEdited = false;\n    // const removeCardID = \"removeCard\" + cardKey;\n\n    const switchColor = (elem) => {\n        console.log(\"fired once\");\n        if (elem.target.style.textDecoration == \"line-through\") {\n            console.log(\"clicked \", elem.target.style.textDecoration)\n            elem.target.style.textDecoration = \"\";\n            elem.target.style.backgroundColor = \"#ffffff\";\n            elem.target.style.color = \"#666668\";\n        }\n        else {\n            // elem.target.style.backgroundColor = \"#9ecd49\";\n            elem.target.style.color = \"#9ecd49\";\n            elem.target.style.textDecoration = \"line-through\";\n\n            // elem.target.style.border = \"#9ecd49 2px solid\"\n        }\n      \n\n    }\n\n    /*  addTodo()\n        Purpose:    calls addTodoItem and pass in cardKey\n        Effect:     Calls props function addTodoItem and pass in CardID\n        Parameters: none\n    */\n    const addTodo = () => \n    {\n        addTodoItem(cardKey);\n    }\n\n \n\n    const updateCardNameWithTarget = () => \n    {\n        console.log(\"cardjs updateCardNameWthTar targetval: \", cardRef.current.value);\n        updateCardName(cardKey, cardRef.current.value)\n    }\n\n    const removeCardWithKey = () => \n    { \n        if (removeState) {\n            removeCard(cardKey);\n        }\n    }\n\n    /*  deleteTodoItemWithKey()\n        Purpose:    calls deleteTodoItem and pass in cardKey\n        Effect:     Calls props function deleteTodoItem and pass in \n                    cardKey with received arguments todoItemKey\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n    */\n    const deleteTodoItemWithKey = (todoItemKey) => \n    {\n        deleteTodoItem(cardKey, todoItemKey);\n    }\n\n    /*  updateTodoItemMessageWithKey()\n        Purpose:    calls updateTodoItemMessage and pass in cardKey\n        Effect:     Calls props function updateTodoItemMessage and pass in \n                    cardKey with received arguments todoItemKey and message\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessageWithKey = (todoItemKey, message) => \n    {\n        updateTodoItemMessage(cardKey, todoItemKey, message);\n    }\n\n\n    useEffect(() =>\n    {\n        const titleInput = document.getElementById(cardKey);\n        const overlayRemoveCard = document.getElementById(removeCardID);\n        /*  checks if the mouse is clicked outside of the provided target\n            then calls corresponding function within */\n        function checkOutside(e) \n        {\n            // console.log(\"todoItem checkOutside called: \", inputEdited);\n            var clickedInsideInput = titleInput.contains(e.target);\n            if (inputEdited && !clickedInsideInput) {\n                console.log(\"TodoItem oh shet clicked outside\");\n                updateCardNameWithTarget();\n                inputEdited = false;\n            }\n        }\n\n        titleInput.addEventListener(\"click\", () => inputEdited = true);\n        removeCardID.current.addEventListener(\"click\", removeCardWithKey);\n        document.addEventListener(\"click\", (e) => checkOutside(e));\n\n        return (() => \n        {\n            titleInput.removeEventListener(\"click\", () => inputEdited = true)\n            // removeCardID.current.removeEventListener(\"click\", removeCardWithKey);\n            document.removeEventListener(\"click\", (e) => checkOutside(e));\n        })\n\n    })\n\n\n    return (\n        <div className={removeState ? cStyle.cardRemoveContainer : cStyle.cardContainer} \n             /* onClick={async () => await props.removeCard(cardKey)} */>\n            <div className={cStyle.titleContainer}> \n                <input type=\"text\" \n                       placeholder=\"Enter a name...\" \n                       defaultValue={cardName} \n                       id={cardKey}\n                       ref={cardRef}\n                       className={cStyle.titleInput}\n                       onChange={() => {inputEdited=true; console.log(\"inputEdited Changed from CardJS: \", cardKey, \" \", inputEdited)}}/>\n                <div className={cStyle.addTodo} onClick={() => {addTodo(); console.log(\"add button clicked\")}}>＋</div>\n            </div>\n            \n\n            <div className={cStyle.scrollableContainer}> \n                \n                {\n                    Object.keys(card.todoList).map((todoItemKey, index) => {\n\n                        return (\n                            // console.log(\"card.js \")\n                            <TodoItem todo={card.todoList[todoItemKey]}\n                                      todoItemKey = {todoItemKey}\n                                      key = {index}\n                                      deleteTodoItem={deleteTodoItemWithKey}\n                                      updateTodoItemMessage={updateTodoItemMessageWithKey}>\n                                      </TodoItem>\n                        )\n                    })\n                }\n                \n                \n            </div>\n            <div  ref={removeCardID} className={cStyle.removeOverlayContainer}>\n                {removeState ? <div className={cStyle.removeOverlay}>CLICK TO REMOVE</div> : <span></span>}\n            </div>\n        \n        </div>\n    );\n}\n\nexport default Card;\n","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/TodoItem.js",["62","63","64","65","66"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * TodoItem.js\n * \n * \n * \n * \n */\n\n\nimport { useState, useEffect, useRef} from 'react';\nimport { TextInput } from 'react-native';\nimport { isCompositeComponent } from 'react-dom/test-utils';\nimport { ClickAwayListener } from '@material-ui/core';\n\n\n\nimport tStyle from './style/TodoItem.module.css';\n\n\nfunction Card(props) {\n    \n    const {todoItemKey, deleteTodoItem, updateTodoItemMessage, todo} = props;\n    const todoItemRef = useRef(null);\n    // const [inputEdited, setInputEdited] = useState(false);\n    let inputEdited = false;\n    var message = todo;\n\n    const deleteCurrent = () => \n    {\n        deleteTodoItem(todoItemKey);\n\n\n    }\n\n    const updateMessage = () =>\n    {        \n        \n        updateTodoItemMessage(todoItemKey, todoItemRef.current.value);\n\n    }\n    \n    useEffect(() =>\n    {\n        const todoInput = document.getElementById(todoItemKey);\n\n\n        function checkOutside(e) \n        {\n            // console.log(\"todoItem checkOutside called: \", todoItemRef);\n            var clickedInsideInput = todoInput.contains(e.target);\n            if (inputEdited && !clickedInsideInput) {\n\n                updateMessage();\n                inputEdited = false;\n            }\n        }\n\n        document.addEventListener(\"click\", (e) => checkOutside(e));\n\n        return (() => \n        {\n            document.removeEventListener(\"click\", (e) => checkOutside(e));\n        })\n\n    })\n\n\n\n    return (\n        <div className={tStyle.todoItemContainer}>\n            <input type=\"text\" \n                   placeholder=\"what to do... \" \n                   defaultValue={message} \n                   id = {todoItemKey}\n                   ref={todoItemRef}\n                   className={tStyle.messageInput}\n                   onChange={(e) => {inputEdited = true; console.log(\"textinput changed\");}}\n                   />\n            \n            <div className={tStyle.deleteContainer} onClick={deleteCurrent}>✘</div>\n        </div>\n    );\n}\n\nexport default Card;\n",{"ruleId":"67","severity":1,"message":"68","line":18,"column":12,"nodeType":"69","messageId":"70","endLine":18,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":18,"column":22,"nodeType":"69","messageId":"70","endLine":18,"endColumn":33},{"ruleId":"72","severity":1,"message":"73","line":64,"column":33,"nodeType":"74","messageId":"75","endLine":64,"endColumn":35},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"67","severity":1,"message":"80","line":7,"column":7,"nodeType":"69","messageId":"70","endLine":7,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":14,"column":6,"nodeType":"83","endLine":14,"endColumn":13,"suggestions":"84"},{"ruleId":"67","severity":1,"message":"85","line":11,"column":10,"nodeType":"69","messageId":"70","endLine":11,"endColumn":30},{"ruleId":"67","severity":1,"message":"86","line":15,"column":8,"nodeType":"69","messageId":"70","endLine":15,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":22,"column":24,"nodeType":"89","messageId":"90","endLine":22,"endColumn":36},{"ruleId":"81","severity":1,"message":"91","line":233,"column":15,"nodeType":"92","endLine":247,"endColumn":6},{"ruleId":"81","severity":1,"message":"93","line":247,"column":8,"nodeType":"83","endLine":247,"endColumn":10,"suggestions":"94"},{"ruleId":"81","severity":1,"message":"95","line":271,"column":8,"nodeType":"83","endLine":271,"endColumn":17,"suggestions":"96"},{"ruleId":"67","severity":1,"message":"97","line":10,"column":9,"nodeType":"69","messageId":"70","endLine":10,"endColumn":17},{"ruleId":"67","severity":1,"message":"98","line":10,"column":19,"nodeType":"69","messageId":"70","endLine":10,"endColumn":28},{"ruleId":"67","severity":1,"message":"85","line":11,"column":10,"nodeType":"69","messageId":"70","endLine":11,"endColumn":30},{"ruleId":"67","severity":1,"message":"99","line":25,"column":22,"nodeType":"69","messageId":"70","endLine":25,"endColumn":33},{"ruleId":"67","severity":1,"message":"100","line":30,"column":11,"nodeType":"69","messageId":"70","endLine":30,"endColumn":22},{"ruleId":"72","severity":1,"message":"73","line":32,"column":46,"nodeType":"74","messageId":"75","endLine":32,"endColumn":48},{"ruleId":"67","severity":1,"message":"101","line":103,"column":15,"nodeType":"69","messageId":"70","endLine":103,"endColumn":32},{"ruleId":"81","severity":1,"message":"102","line":113,"column":31,"nodeType":"103","endLine":113,"endColumn":36},{"ruleId":"67","severity":1,"message":"97","line":10,"column":10,"nodeType":"69","messageId":"70","endLine":10,"endColumn":18},{"ruleId":"67","severity":1,"message":"104","line":11,"column":10,"nodeType":"69","messageId":"70","endLine":11,"endColumn":19},{"ruleId":"67","severity":1,"message":"85","line":12,"column":10,"nodeType":"69","messageId":"70","endLine":12,"endColumn":30},{"ruleId":"67","severity":1,"message":"105","line":13,"column":10,"nodeType":"69","messageId":"70","endLine":13,"endColumn":27},{"ruleId":"81","severity":1,"message":"102","line":54,"column":31,"nodeType":"103","endLine":54,"endColumn":36},"no-unused-vars","'addState' is assigned a value but never used.","Identifier","unusedVar","'setAddState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"'useStateWithLocalStorage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'localStorageKey'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'isCompositeComponent' is defined but never used.","'Checkbox' is defined but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'checkSaveAction', 'key', and 'saveList'. Either include them or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'cards'. Either include it or remove the dependency array.",["110"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'setCardName' is assigned a value but never used.","'switchColor' is assigned a value but never used.","'overlayRemoveCard' is assigned a value but never used.","Assignments to the 'inputEdited' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'TextInput' is defined but never used.","'ClickAwayListener' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [localStorageKey, value]",{"range":"117","text":"118"},"Update the dependencies array to be: [checkSaveAction, key, saveList]",{"range":"119","text":"120"},"Update the dependencies array to be: [addCard, cards]",{"range":"121","text":"122"},[366,373],"[localStorageKey, value]",[8028,8030],"[checkSaveAction, key, saveList]",[8723,8732],"[addCard, cards]"]