[{"/Users/dumbcan/Desktop/wemo/todo-app/src/components/Todo.js":"1","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/index.js":"2","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/reportWebVitals.js":"3","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/App.js":"4","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js":"5","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Header.js":"6","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js":"7","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/TodoItem.js":"8"},{"size":3770,"mtime":1623120611106,"results":"9","hashOfConfig":"10"},{"size":500,"mtime":1624336386779,"results":"11","hashOfConfig":"12"},{"size":364,"mtime":1624336386787,"results":"13","hashOfConfig":"12"},{"size":273,"mtime":1624336386579,"results":"14","hashOfConfig":"12"},{"size":9462,"mtime":1624337425235,"results":"15","hashOfConfig":"12"},{"size":515,"mtime":1624336386631,"results":"16","hashOfConfig":"12"},{"size":3710,"mtime":1624337546942,"results":"17","hashOfConfig":"12"},{"size":977,"mtime":1624336386766,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1jpyqzi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"czmzmo",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dumbcan/Desktop/wemo/todo-app/src/components/Todo.js",["36","37","38"],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/index.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/reportWebVitals.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/App.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js",["39","40"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Todo.js\n *\n *\n *\n *\n */\n\nimport { useState, useEffect } from \"react\";\n\nimport Card from \"../components/Card.js\";\nimport tStyle from \"./style/Todo.module.css\";\n\n/**\n * REVIEW: default value 建議使用 object 結構，\n * 以利於 addCard 或相似時機時取用，就不用重寫相似 code。可\n * 想像極端點，例如： default value 若擁有 20 個 props，\n * 則 addCard assign temp 時就不需重寫這些 props\n */\nconst cardsDefault = {\n  name: \"\",\n  todoList: [{ message: \"\", todoItemKey: 0 }],\n  todoItemKeyTrack: 1,\n  cardKey: 0,\n};\nconst checkSaveAction = localStorage.getItem(\"saveAction\") === \"true\";\n\nfunction Todo() {\n  const [cards, setCards] = useState(\n    checkSaveAction\n      ? JSON.parse(localStorage.getItem(\"savedCards\"))\n      : [cardsDefault]\n  );\n  const [key, setKey] = useState(\n    checkSaveAction ? parseInt(localStorage.getItem(\"cardKey\")) : 1\n  ); // cardKey\n  const [removeState, setRemoveState] = useState(false);\n\n  const [saveList, setSaveList] = useState(true);\n\n  const updateLocal = () => {\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n    localStorage.setItem(\"saveAction\", saveList);\n    localStorage.setItem(\"cardKey\", key);\n  };\n\n  /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n\n  const addCard = () => {\n    setRemoveState(false);\n    // REVIEW: 使用 const / let 取代 var\n    /** REVIEW: 此處建議 spread `cardsDefault` 的預設結構，再另外寫 cardKey Prod 。\n     *  const temp = {...cardsDefault, cardKey: key, }\n     */\n    setCards((prevArr) => [\n      ...prevArr,\n      {\n        ...cardsDefault,\n        cardKey: key,\n      },\n    ]);\n\n    /*  increment key by 1 */\n    setKey((prev) => prev + 1);\n  };\n\n  /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n  const removeCard = (cardKey) => {\n    setCards((prev) => prev.filter((eachCard) => eachCard.cardKey !== cardKey));\n  };\n\n  /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n  const updateCardName = (cardKey, cardName) => {\n    setCards((prevArr) =>\n      prevArr.map((eachCard) =>\n        eachCard.cardKey === cardKey\n          ? { ...eachCard, name: cardName }\n          : { ...eachCard }\n      )\n    );\n  };\n\n  /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n  const addTodoItem = (cardKey) => {\n    setCards((prevArr) =>\n      prevArr.map((eachCard) => {\n        return eachCard.cardKey === cardKey\n          ? {\n              ...eachCard,\n              todoItemKeyTrack: eachCard.todoItemKeyTrack + 1,\n              todoList: [\n                ...eachCard.todoList,\n                {\n                  message: \"\",\n                  todoItemKey: eachCard.todoItemKeyTrack,\n                },\n              ],\n            }\n          : eachCard;\n        // if (eachCard.cardKey === cardKey) {\n        //   let tempTodoItem = { message: \"\", todoItemKey: eachCard.todoItemKeyTrack };\n\n        //   let temp = { ...eachCard };\n        //   temp.todoItemKeyTrack++;\n        //   temp.todoList = [...temp.todoList, tempTodoItem];\n        //   return temp;\n        // }\n        // return eachCard;\n      })\n    );\n  };\n\n  /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n  const deleteTodoItem = (cardKey, todoItemKey) => {\n    setCards((prevArr) =>\n      prevArr.map((eachCard) => {\n        if (eachCard.cardKey === cardKey) {\n          eachCard.todoList = eachCard.todoList.filter(\n            (todoItem) => todoItem.todoItemKey != todoItemKey\n          );\n        }\n        return eachCard;\n      })\n    );\n  };\n\n  /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n  const updateTodoItemMessage = (cardKey, todoItemKey, message) => {\n    setCards((prevArr) =>\n      prevArr.map((eachCard) => {\n        return eachCard.cardKey === cardKey\n          ? {\n              ...eachCard,\n              todoList: eachCard.todoList.map((eachTodoItem) => {\n                return eachTodoItem.todoItemKey === todoItemKey\n                  ? {\n                      ...eachTodoItem,\n                      message: message,\n                    }\n                  : eachTodoItem;\n              }),\n            }\n          : eachCard;\n      })\n    );\n  };\n\n  /*  acts like a callback function to setCards */\n  useEffect(() => {\n    updateLocal();\n    console.log(\"useEffect cards: \", cards);\n  }, [cards]);\n\n  useEffect(() => {\n    const handleSpacePress = () => {\n      removeState && setRemoveState((prev) => !prev);\n    };\n\n    document.addEventListener(\"keydown\", handleSpacePress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleSpacePress);\n    };\n  }, []);\n\n  return (\n    <div className={tStyle.todoContainer}>\n      <div className={tStyle.editsContainer}>\n        <div className={tStyle.editButtons}>\n          <button className={tStyle.addEvent} onClick={addCard}>\n            ＋\n          </button>\n          {/* REVIEW ：覺得這裡刪除的 UI 做得蠻有趣蠻棒的，\n                    若是我，會加入按空白處可以取消 remove state 的機制\n                    */}\n          <button\n            className={tStyle.removeEvent}\n            onClick={() => setRemoveState((prev) => !prev)}\n          >\n            －\n          </button>\n        </div>\n\n        <label className={tStyle.saveListContainer}>\n          <input\n            type=\"checkbox\"\n            name=\"saveList\"\n            className={tStyle.saveCheckbox}\n            checked={saveList}\n            onChange={() => {\n              localStorage.setItem(\"saveAction\", !saveList);\n              setSaveList((prev) => !prev);\n            }}\n          />\n          Auto Save\n        </label>\n      </div>\n\n      <div className={tStyle.cardsContainer}>\n        {\n          // REVIEW: key word: optional chain\n          // 可簡化為 cards?.map((card))\n          // REVIEW [] && 'a' 會返回 'a'，這裏的 cards && ... 前面的判斷式會永遠是 true\n          cards.map((card) => {\n            return (\n              <Card\n                addCard={addCard}\n                removeCard={removeCard}\n                removeState={removeState}\n                card={card}\n                cardKey={card.cardKey}\n                addTodoItem={addTodoItem}\n                key={card.cardKey}\n                deleteTodoItem={deleteTodoItem}\n                updateTodoItemMessage={updateTodoItemMessage}\n                updateCardName={updateCardName}\n              />\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;\n\n/**\n * REVIEW: 其他可注意的點\n * 1. 有些地方使用了 arrow function，有些則使用 function(){}，\n *    建議語法統一，可了解其差別\n * 2. 團隊合作會使用一些工具維持一致的 coding style，\n *    可練習安裝 es lint & prettier ，配合 editor 的 format 功能\n * 3. todo item 可練習以“Enter”加入新的一行\n *\n */\n","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Header.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/TodoItem.js",[],{"ruleId":"41","severity":1,"message":"42","line":18,"column":12,"nodeType":"43","messageId":"44","endLine":18,"endColumn":20},{"ruleId":"41","severity":1,"message":"45","line":18,"column":22,"nodeType":"43","messageId":"44","endLine":18,"endColumn":33},{"ruleId":"46","severity":1,"message":"47","line":64,"column":33,"nodeType":"48","messageId":"49","endLine":64,"endColumn":35},{"ruleId":"50","severity":1,"message":"51","line":201,"column":6,"nodeType":"52","endLine":201,"endColumn":13,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":213,"column":6,"nodeType":"52","endLine":213,"endColumn":8,"suggestions":"55"},"no-unused-vars","'addState' is assigned a value but never used.","Identifier","unusedVar","'setAddState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateLocal'. Either include it or remove the dependency array.","ArrayExpression",["56"],"React Hook useEffect has a missing dependency: 'removeState'. Either include it or remove the dependency array.",["57"],{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [cards, updateLocal]",{"range":"62","text":"63"},"Update the dependencies array to be: [removeState]",{"range":"64","text":"65"},[6769,6776],"[cards, updateLocal]",[7056,7058],"[removeState]"]