[{"/Users/dumbcan/Desktop/wemo/todo-app/src/components/Todo.js":"1","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/index.js":"2","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/reportWebVitals.js":"3","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/App.js":"4","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js":"5","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Header.js":"6","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js":"7","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/TodoItem.js":"8"},{"size":3770,"mtime":1623120611106,"results":"9","hashOfConfig":"10"},{"size":500,"mtime":1623131220736,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1623131220737,"results":"13","hashOfConfig":"12"},{"size":284,"mtime":1623752341673,"results":"14","hashOfConfig":"12"},{"size":8201,"mtime":1623755380132,"results":"15","hashOfConfig":"12"},{"size":512,"mtime":1623752494292,"results":"16","hashOfConfig":"12"},{"size":3760,"mtime":1623813032390,"results":"17","hashOfConfig":"12"},{"size":1067,"mtime":1623753252147,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1jpyqzi",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"flow4s",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},"/Users/dumbcan/Desktop/wemo/todo-app/src/components/Todo.js",["38","39","40"],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/index.js",[],["41","42"],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/reportWebVitals.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/App.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js",["43","44"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect } from 'react';\n\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\n\n\n\nfunction Todo() {\n\n\n    \n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n\n    \n    const checkSaveAction = localStorage.getItem(\"saveAction\") === \"true\";\n\n    const [cards, setCards] = useState(checkSaveAction ? JSON.parse(localStorage.getItem(\"savedCards\")) : cardsDefault);\n    const [key, setKey] = useState(checkSaveAction ? parseInt(localStorage.getItem(\"cardKey\")) : 1);                      // cardKey\n    const [removeState, setRemoveState] = useState(false);\n\n    const [saveList, setSaveList] = useState(true);\n\n\n    const updateLocal = () =>\n    {\n\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n        localStorage.setItem(\"saveAction\", saveList);\n        localStorage.setItem(\"cardKey\", key);\n  \n            \n    }\n\n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n    const addCard = async() => \n    {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = Object.assign({}, cardsDefault[0]);\n        \n        /*  increment key by 1 */\n        setKey(prev => prev + 1);\n\n        setCards(prev => prev = tempCard);\n     \n        \n\n    }\n\n\n    /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n    const removeCard = (cardKey) => \n    { \n        /* Ensures only delete card when removeState is on */\n        let tempCards = Object.assign({}, cards);\n           \n        delete tempCards[cardKey];\n\n        setCards(prev => prev = tempCards);\n            \n\n        \n\n    }\n    \n    /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n    const updateCardName = (cardKey, cardName) => \n    {\n        let tempCards = Object.assign({}, cards);\n\n        tempCards[cardKey].name = cardName;\n        setCards(prev => prev = tempCards);\n\n        \n\n\n    }\n\n\n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => \n    {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(prev => prev = tempCards);\n\n     \n\n    }\n\n    \n   \n    /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n    const deleteTodoItem = async (cardKey, todoItemKey) => \n    {\n\n        /*  Only deletes the todoItem if the card has todoItemList > 1 */\n        if (Object.keys(cards[cardKey].todoList).length > 1) {\n            let tempCards = Object.assign({}, cards);\n\n            \n            delete tempCards[cardKey].todoList[todoItemKey];\n\n            \n            setCards(prev => prev = tempCards);\n\n\n        }\n        \n    }\n    /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessage = (cardKey, todoItemKey, message) => \n    {\n        let tempCards = Object.assign({}, cards);\n        \n        tempCards[cardKey].todoList[todoItemKey] = message;\n        \n        setCards(prev => prev = tempCards);\n        \n       \n    }\n\n\n    /*  acts like a callback function to setCards */\n    useEffect(() =>\n    {\n        updateLocal()\n    }, [cards])\n\n\n\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <div className={tStyle.editButtons}>\n                    <button className={tStyle.addEvent}\n                            onClick={addCard}>\n                        ＋\n                    </button>\n                    <button className={tStyle.removeEvent}\n                            onClick={() => setRemoveState((prev) => !prev)} >\n                        －\n                    </button>\n                </div>\n                \n                <label className={tStyle.saveListContainer}>\n                    <input type=\"checkbox\" name=\"saveList\" className={tStyle.saveCheckbox} checked={saveList} onChange={() => {localStorage.setItem(\"saveAction\", !saveList); setSaveList((prev) => !prev);   }}/>\n                    Auto Save\n                </label>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  cards={cards}\n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}\n                                  deleteTodoItem={deleteTodoItem}\n                                  updateTodoItemMessage={updateTodoItemMessage}\n                                  updateCardName={updateCardName}>\n                                    \n                            </Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n","/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Header.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js",[],"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/TodoItem.js",["45"],"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * TodoItem.js\n * \n * \n * \n * \n */\n\n\nimport { useRef } from 'react';\n\n\n\n\nimport tStyle from './style/TodoItem.module.css';\n\n\nfunction Card(props) {\n    \n    const {todoItemKey, deleteTodoItem, updateTodoItemMessage, todo, card} = props;\n    const todoItemRef = useRef(null);\n\n    \n    \n    \n    const deleteCurrent = () => \n    {\n        deleteTodoItem(todoItemKey);\n\n\n    }\n\n    const updateMessage = () =>\n    {        \n        updateTodoItemMessage(todoItemKey, todoItemRef.current.value);\n\n    }\n    \n   \n\n\n\n    return (\n        <div className={tStyle.todoItemContainer}>\n            <input type=\"text\" \n                   placeholder=\"what to do... \" \n                   value={todo} \n                   ref={todoItemRef}\n                   className={tStyle.messageInput}\n                   onChange={updateMessage}\n                   />\n            \n            <div className={tStyle.deleteContainer} onClick={deleteCurrent}>✘</div>\n        </div>\n    );\n}\n\nexport default Card;\n",{"ruleId":"46","severity":1,"message":"47","line":18,"column":12,"nodeType":"48","messageId":"49","endLine":18,"endColumn":20},{"ruleId":"46","severity":1,"message":"50","line":18,"column":22,"nodeType":"48","messageId":"49","endLine":18,"endColumn":33},{"ruleId":"51","severity":1,"message":"52","line":64,"column":33,"nodeType":"53","messageId":"54","endLine":64,"endColumn":35},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":22,"column":24,"nodeType":"61","messageId":"62","endLine":22,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":211,"column":8,"nodeType":"65","endLine":211,"endColumn":15,"suggestions":"66"},{"ruleId":"46","severity":1,"message":"67","line":20,"column":70,"nodeType":"48","messageId":"49","endLine":20,"endColumn":74},"no-unused-vars","'addState' is assigned a value but never used.","Identifier","unusedVar","'setAddState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateLocal'. Either include it or remove the dependency array.","ArrayExpression",["70"],"'card' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [cards, updateLocal]",{"range":"73","text":"74"},[6238,6245],"[cards, updateLocal]"]