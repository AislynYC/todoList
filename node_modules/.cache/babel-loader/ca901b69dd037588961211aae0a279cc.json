{"ast":null,"code":"var _jsxFileName = \"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js\",\n    _s = $RefreshSig$();\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\nimport { useState, useEffect } from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\nimport Card from '../components/Card.js';\nimport tStyle from './style/Todo.module.css';\nimport Checkbox from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todo() {\n  _s();\n\n  var cardsDefault = new Object();\n  cardsDefault = {\n    0: {\n      name: \"\",\n      todoList: {\n        0: \"\"\n      },\n      todoListKey: 1\n    }\n  };\n  const [cards, setCards] = useState(JSON.parse(localStorage.getItem(\"savedCards\")) || cardsDefault);\n  const [key, setKey] = useState(1);\n  const [removeState, setRemoveState] = useState(false);\n  const [saveList, setSaveList] = useState(true);\n  localStorage.setItem(\"test\", \"cardsYo\");\n  localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  /*  addCard()\n      Purpose:    to add an additional card \n      Effect:     sets the state of \"remove\" to false, preventing users \n                  to add cards while remove state is on. Then makes a copy \n                  of card Object to set new card by adding value of \n                  \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                  state.\n      Parameters: none\n  */\n\n  const addCard = () => {\n    setRemoveState(false);\n    let tempCard = Object.assign({}, cards);\n    tempCard[key] = Object.assign({}, cardsDefault[0]);\n    /*  increment key by 1 */\n\n    setKey(prev => prev + 1);\n    setCards(tempCard);\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n    console.log(\"localStorage after addcards: \", JSON.parse(localStorage.getItem(\"savedCards\")));\n  };\n  /*  removeCard()\n      Purpose:    to remove a card with given cardKey identifier\n      Effect:     On removeState being true, create a copy of cards Object \n                  to delete the identified card with given parameter cardKey.\n                  Then updates the state of cards. \n      Parameters: int cardKey - key to the card to be removed \n  */\n\n\n  const removeCard = cardKey => {\n    /* Ensures only delete card when removeState is on */\n    console.log(\"removeCard cardKey: \", cardKey);\n\n    if (removeState) {\n      let tempCards = Object.assign({}, cards);\n      delete tempCards[cardKey];\n      setCards(prev => prev = tempCards);\n    }\n\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  };\n  /*  updateCardName()\n      Purpose:    to update name of specified card onChange\n      Effect:     Creates a copy of cards Object, then alter the name of \n                  specified card. \n      Parameters: int cardKey     - the identifier to the card\n                  string cardName  - the name to be saved\n  */\n\n\n  const updateCardName = (cardKey, cardName) => {\n    let tempCards = Object.assign({}, cards);\n    console.log(\"before updateCardName: \", tempCards);\n    tempCards[cardKey].name = cardName;\n    console.log(\"after updateCardName: \", tempCards);\n    setCards(prev => prev = tempCards);\n    console.log(\"todojs updateCardName: \", cards[cardKey].name);\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  };\n  /*  addTodoItem()\n      Purpose:    to add an additional todoItem\n      Effect:     makes a copy of \"cards\" to add additional string value\n                  to the new key \"cards[cardKey].todoListKey\". Then increment\n                  cards[cardKey].todoListKey by 1. lastly, setCards with the \n                  mutated tempCards Object \n      Parameters: int cardKey  - the identifier to the card that needs \n                                    needs to be altered\n  */\n\n\n  const addTodoItem = cardKey => {\n    let tempCards = Object.assign({}, cards);\n    /*  Adds new todoItem to the card */\n\n    tempCards[cardKey].todoList = { ...tempCards[cardKey].todoList,\n      [tempCards[cardKey].todoListKey]: \"\"\n    };\n    /* This increments the todoListKey by 1 to ensure adding todoItem is \n       added correctly each time */\n\n    tempCards[cardKey].todoListKey++;\n    setCards(prev => prev = tempCards);\n    console.log(\"todojs addTodoItem cards: \", cards);\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  };\n  /*  deleteTodoItem()\n      Purpose:    to delete a todoItem\n      Effect:     Only allows the deletion of a todoItem if the specified \n                  card has a todoItemList greater than 1. On true, creates \n                  a copy of cards Object to delete the todoItem of at given\n                  cardKey at given todoItemKey. finally, update state of \n                  cards. \n      Parameters: int cardKey     - the identifier to the card that contains \n                                    the todoItem\n                  int todoItemKey - the identifier to the todoItem that will\n                                    be deleted \n  */\n\n\n  const deleteTodoItem = async (cardKey, todoItemKey) => {\n    /*  Only deletes the todoItem if the card has todoItemList > 1 */\n    if (Object.keys(cards[cardKey].todoList).length > 1) {\n      let tempCards = Object.assign({}, cards);\n      console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n      console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n      console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n      delete tempCards[cardKey].todoList[todoItemKey];\n      console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n      setCards(prev => prev = tempCards);\n      console.log(\"todoJs deleteTodoItem cards: \", cards);\n      console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n      localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n    }\n  };\n  /*  updateTodoItemMessage()\n      Purpose:    to update todoItem Message onChange\n      Effect:     Creates a copy of cards Object to change the todoItem of at \n                  given cardKey of given todoItemKey. finally, update state \n                  of cards. \n      Parameters: int cardKey     - the identifier to the card that contains \n                                    the todoItem\n                  int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n                  string message  - the message that needs to be saved\n  */\n\n\n  const updateTodoItemMessage = (cardKey, todoItemKey, message) => {\n    let tempCards = Object.assign({}, cards);\n    tempCards[cardKey].todoList[todoItemKey] = message;\n    setCards(prev => prev = tempCards);\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards)); // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n  };\n\n  useEffect(() => {\n    const addCardButton = document.getElementById(\"addCardButton\");\n    const removeCardButton = document.getElementById(\"removeCardButton\");\n\n    const updateRemoveState = () => {\n      setRemoveState(prev => !prev);\n    };\n\n    addCardButton.addEventListener(\"click\", addCard);\n    removeCardButton.addEventListener(\"click\", updateRemoveState);\n    console.log(\"Todo UseEffeect cards: \", cards);\n    return () => {\n      addCardButton.removeEventListener(\"click\", addCard);\n      removeCardButton.removeEventListener(\"click\", updateRemoveState);\n    };\n  }, [addCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tStyle.todoContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.editsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: tStyle.editButtons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: tStyle.addEvent // onClick={addCard}\n          ,\n          id: \"addCardButton\",\n          children: \"\\uFF0B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: tStyle.removeEvent,\n          id: \"removeCardButton\"\n          /* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */\n          ,\n          children: \"\\uFF0D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: tStyle.saveListContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"saveList\",\n          className: tStyle.saveCheckbox,\n          checked: saveList,\n          onChange: () => {\n            setSaveList(prev => !prev);\n            localStorage.setItem(\"saveAction\", saveList);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), \"Auto Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.cardsContainer,\n      children: Object.keys(cards).map((cardKey, index) => {\n        console.log(\"Todo.js cardKey: \", cardKey);\n        console.log(\"todojs objecke: \", Object.keys(cards));\n        return /*#__PURE__*/_jsxDEV(Card, {\n          removeCard: removeCard,\n          removeState: removeState,\n          card: cards[cardKey],\n          cardKey: cardKey,\n          addTodoItem: addTodoItem,\n          deleteTodoItem: deleteTodoItem,\n          updateTodoItemMessage: updateTodoItemMessage,\n          updateCardName: updateCardName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Todo, \"dzeQ4cdhc++ywrZ7nP3d/o93yTg=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js"],"names":["useState","useEffect","isCompositeComponent","Card","tStyle","Checkbox","Todo","cardsDefault","Object","name","todoList","todoListKey","cards","setCards","JSON","parse","localStorage","getItem","key","setKey","removeState","setRemoveState","saveList","setSaveList","setItem","stringify","addCard","tempCard","assign","prev","console","log","removeCard","cardKey","tempCards","updateCardName","cardName","addTodoItem","deleteTodoItem","todoItemKey","keys","length","updateTodoItemMessage","message","addCardButton","document","getElementById","removeCardButton","updateRemoveState","addEventListener","removeEventListener","todoContainer","editsContainer","editButtons","addEvent","removeEvent","saveListContainer","saveCheckbox","cardsContainer","map","index"],"mappings":"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","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\nimport Checkbox from '@material-ui/core';\n\n\nfunction Todo() {\n\n    \n\n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n    \n    const [cards, setCards] = useState(JSON.parse(localStorage.getItem(\"savedCards\")) || cardsDefault);\n    const [key, setKey] = useState(1);\n    const [removeState, setRemoveState] = useState(false);\n\n    const [saveList, setSaveList] = useState(true);\n\n    localStorage.setItem(\"test\", \"cardsYo\");\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n \n    \n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n    const addCard = () => \n    {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = Object.assign({}, cardsDefault[0]);\n        \n        /*  increment key by 1 */\n        setKey(prev => prev + 1);\n\n        setCards(tempCard);\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n        console.log(\"localStorage after addcards: \", JSON.parse(localStorage.getItem(\"savedCards\")) );\n\n    }\n\n\n    /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n    const removeCard = (cardKey) => \n    { \n        /* Ensures only delete card when removeState is on */\n        console.log(\"removeCard cardKey: \", cardKey);\n        if (removeState) {\n            let tempCards = Object.assign({}, cards);\n           \n            delete tempCards[cardKey];\n            setCards(prev => prev = tempCards);\n            \n        }\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n    }\n    \n    /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n    const updateCardName = (cardKey, cardName) => \n    {\n        let tempCards = Object.assign({}, cards);\n        console.log(\"before updateCardName: \", tempCards);\n\n        tempCards[cardKey].name = cardName;\n        console.log(\"after updateCardName: \", tempCards);\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs updateCardName: \", cards[cardKey].name );\n\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => \n    {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs addTodoItem cards: \", cards);\n\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n    \n   \n    /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n    const deleteTodoItem = async (cardKey, todoItemKey) => \n    {\n\n        /*  Only deletes the todoItem if the card has todoItemList > 1 */\n        if (Object.keys(cards[cardKey].todoList).length > 1) {\n            let tempCards = Object.assign({}, cards);\n            console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n            console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n\n            console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n            delete tempCards[cardKey].todoList[todoItemKey];\n            console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n\n            setCards(prev => prev = tempCards);\n            console.log(\"todoJs deleteTodoItem cards: \", cards);\n            console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n\n            localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n\n        }\n        \n    }\n    /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessage = (cardKey, todoItemKey, message) => \n    {\n        let tempCards = Object.assign({}, cards);\n        \n        tempCards[cardKey].todoList[todoItemKey] = message;\n\n        setCards(prev => prev = tempCards);\n        \n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n        // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n    }\n\n\n\n    useEffect(() => {\n\n        \n        const addCardButton = document.getElementById(\"addCardButton\");\n        const removeCardButton = document.getElementById(\"removeCardButton\");\n\n        const updateRemoveState = () => \n        {\n            setRemoveState((prev) => !prev); \n        }\n        addCardButton.addEventListener(\"click\", addCard);\n        removeCardButton.addEventListener(\"click\", updateRemoveState);\n        \n        console.log(\"Todo UseEffeect cards: \" , cards);\n\n        return (() => \n        {\n            addCardButton.removeEventListener(\"click\", addCard);\n            removeCardButton.removeEventListener(\"click\", updateRemoveState);\n\n        });\n    }, [addCard])\n\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <div className={tStyle.editButtons}>\n                    <button className={tStyle.addEvent}\n                            // onClick={addCard}\n                            id=\"addCardButton\">\n                        ＋\n                    </button>\n                    <button className={tStyle.removeEvent}\n                            id=\"removeCardButton\"\n                            /* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */>\n                        －\n                    </button>\n                </div>\n                \n                <label className={tStyle.saveListContainer}>\n                    <input type=\"checkbox\" name=\"saveList\" className={tStyle.saveCheckbox} checked={saveList} onChange={() => {setSaveList((prev) => !prev);  localStorage.setItem(\"saveAction\", saveList); }}/>\n                    Auto Save\n                </label>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        console.log(\"Todo.js cardKey: \", cardKey);\n                        console.log(\"todojs objecke: \", Object.keys(cards));\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}\n                                  deleteTodoItem={deleteTodoItem}\n                                  updateTodoItemMessage={updateTodoItemMessage}\n                                  updateCardName={updateCardName}>\n                                    \n                            </Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}