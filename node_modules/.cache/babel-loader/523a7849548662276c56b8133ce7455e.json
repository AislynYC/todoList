{"ast":null,"code":"var _jsxFileName = \"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js\",\n    _s = $RefreshSig$();\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Card.js\n * \n * \n * \n * \n */\nimport { useState, useEffect, useRef } from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\nimport TodoItem from '../components/TodoItem.js';\nimport cStyle from './style/Card.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card(props) {\n  _s();\n\n  const {\n    cardKey,\n    card,\n    addTodoItem,\n    deleteTodoItem,\n    updateTodoItemMessage,\n    updateCardName\n  } = props;\n  const [addState, setAddState] = useState(false);\n  const [textElem, setTextElem] = useState(null);\n  const [clicked, setClicked] = useState(false);\n  const [todo, setTodo] = useState(props.card.todo);\n  const todoRef = useRef(null);\n  const [cardName, setCardName] = useState(props.card.name);\n  let inputEdited = false;\n\n  const switchColor = elem => {\n    console.log(\"fired once\");\n\n    if (elem.target.style.textDecoration == \"line-through\") {\n      console.log(\"clicked \", elem.target.style.textDecoration);\n      elem.target.style.textDecoration = \"\";\n      elem.target.style.backgroundColor = \"#ffffff\";\n      elem.target.style.color = \"#666668\";\n    } else {\n      // elem.target.style.backgroundColor = \"#9ecd49\";\n      elem.target.style.color = \"#9ecd49\";\n      elem.target.style.textDecoration = \"line-through\"; // elem.target.style.border = \"#9ecd49 2px solid\"\n    }\n  };\n  /*  addTodo()\n      Purpose:    calls addTodoItem and pass in cardKey\n      Effect:     Calls props function addTodoItem and pass in CardID\n      Parameters: none\n  */\n\n\n  const addTodo = () => {\n    addTodoItem(cardKey);\n  };\n\n  const updateCardNameWithTarget = target => {\n    console.log(\"cardjs updateCardNameWthTar targetval: \", target.value);\n    updateCardName(cardKey, target.value);\n  };\n  /*  deleteTodoItemWithKey()\n      Purpose:    calls deleteTodoItem and pass in cardKey\n      Effect:     Calls props function deleteTodoItem and pass in \n                  cardKey with received arguments todoItemKey\n      Parameters: int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n  */\n\n\n  const deleteTodoItemWithKey = todoItemKey => {\n    deleteTodoItem(cardKey, todoItemKey);\n  };\n  /*  updateTodoItemMessageWithKey()\n      Purpose:    calls updateTodoItemMessage and pass in cardKey\n      Effect:     Calls props function updateTodoItemMessage and pass in \n                  cardKey with received arguments todoItemKey and message\n      Parameters: int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n                  string message  - the message that needs to be saved\n  */\n\n\n  const updateTodoItemMessageWithKey = (todoItemKey, message) => {\n    updateTodoItemMessage(cardKey, todoItemKey, message);\n  };\n\n  useEffect(() => {\n    const titleInput = document.getElementById(cardKey);\n    /*  checks if the mouse is clicked outside of the provided target\n        then calls corresponding function within */\n\n    function checkOutside(e) {\n      console.log(\"todoItem checkOutside called: \", inputEdited);\n      var clickedInsideInput = titleInput.contains(e.target);\n\n      if (inputEdited && !clickedInsideInput) {\n        console.log(\"TodoItem oh shet clicked outside\");\n        updateCardNameWithTarget(titleInput);\n        inputEdited = false;\n      }\n    }\n\n    document.addEventListener(\"click\", e => checkOutside(e));\n    return () => {\n      window.removeEventListener(\"click\", e => checkOutside(e));\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.removeState ? cStyle.cardRemoveContainer : cStyle.cardContainer,\n    onClick: async () => await props.removeCard(cardKey),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: cStyle.titleContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a name...\",\n        defaultValue: cardName,\n        id: cardKey,\n        className: cStyle.titleInput,\n        onChange: () => {\n          inputEdited = true;\n          console.log(\"inputEdited Changed from CardJS: \", cardKey, \" \", inputEdited);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cStyle.addTodo,\n        onClick: () => {\n          addTodo();\n          console.log(\"add button clicked\");\n        },\n        children: \"\\uFF0B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cStyle.scrollableContainer,\n      children: Object.keys(card.todoList).map((todoItemKey, index) => {\n        return (\n          /*#__PURE__*/\n          // console.log(\"card.js \")\n          _jsxDEV(TodoItem, {\n            todo: card.todoList[todoItemKey],\n            todoItemKey: todoItemKey,\n            deleteTodoItem: deleteTodoItemWithKey,\n            updateTodoItemMessage: updateTodoItemMessageWithKey\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), props.removeState ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cStyle.removeOverlay,\n      children: \"CLICK TO REMOVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 95\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"ZxuChLKZD8gkiZ4VjW4QoG3YUu0=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js"],"names":["useState","useEffect","useRef","isCompositeComponent","TodoItem","cStyle","Card","props","cardKey","card","addTodoItem","deleteTodoItem","updateTodoItemMessage","updateCardName","addState","setAddState","textElem","setTextElem","clicked","setClicked","todo","setTodo","todoRef","cardName","setCardName","name","inputEdited","switchColor","elem","console","log","target","style","textDecoration","backgroundColor","color","addTodo","updateCardNameWithTarget","value","deleteTodoItemWithKey","todoItemKey","updateTodoItemMessageWithKey","message","titleInput","document","getElementById","checkOutside","e","clickedInsideInput","contains","addEventListener","window","removeEventListener","removeState","cardRemoveContainer","cardContainer","removeCard","titleContainer","scrollableContainer","Object","keys","todoList","map","index","removeOverlay"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,SAASC,oBAAT,QAAqC,sBAArC;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AAGA,OAAOC,MAAP,MAAmB,yBAAnB;;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA,cAA7B;AAA6CC,IAAAA,qBAA7C;AAAoEC,IAAAA;AAApE,MAAsFN,KAA5F;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAACO,KAAK,CAACE,IAAN,CAAWW,IAAZ,CAAhC;AACA,QAAME,OAAO,GAAGpB,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAACO,KAAK,CAACE,IAAN,CAAWgB,IAAZ,CAAxC;AAEA,MAAIC,WAAW,GAAG,KAAlB;;AAGA,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,QAAIF,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,cAAlB,IAAoC,cAAxC,EAAwD;AACpDJ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,cAA1C;AACAL,MAAAA,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,cAAlB,GAAmC,EAAnC;AACAL,MAAAA,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBE,eAAlB,GAAoC,SAApC;AACAN,MAAAA,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBG,KAAlB,GAA0B,SAA1B;AACH,KALD,MAMK;AACD;AACAP,MAAAA,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBG,KAAlB,GAA0B,SAA1B;AACAP,MAAAA,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,cAAlB,GAAmC,cAAnC,CAHC,CAKD;AACH;AAGJ,GAjBD;AAmBA;AACJ;AACA;AACA;AACA;;;AACI,QAAMG,OAAO,GAAG,MAAM;AAClB1B,IAAAA,WAAW,CAACF,OAAD,CAAX;AACH,GAFD;;AAMA,QAAM6B,wBAAwB,GAAIN,MAAD,IAAY;AACzCF,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDC,MAAM,CAACO,KAA9D;AACAzB,IAAAA,cAAc,CAACL,OAAD,EAAUuB,MAAM,CAACO,KAAjB,CAAd;AACH,GAHD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,qBAAqB,GAAIC,WAAD,IAC9B;AACI7B,IAAAA,cAAc,CAACH,OAAD,EAAUgC,WAAV,CAAd;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,4BAA4B,GAAG,CAACD,WAAD,EAAcE,OAAd,KACrC;AACI9B,IAAAA,qBAAqB,CAACJ,OAAD,EAAUgC,WAAV,EAAuBE,OAAvB,CAArB;AACH,GAHD;;AAMAzC,EAAAA,SAAS,CAAC,MACV;AACI,UAAM0C,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwBrC,OAAxB,CAAnB;AAEA;AACR;;AACQ,aAASsC,YAAT,CAAsBC,CAAtB,EACA;AACIlB,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CJ,WAA9C;AACA,UAAIsB,kBAAkB,GAAGL,UAAU,CAACM,QAAX,CAAoBF,CAAC,CAAChB,MAAtB,CAAzB;;AACA,UAAIL,WAAW,IAAI,CAACsB,kBAApB,EAAwC;AACpCnB,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAO,QAAAA,wBAAwB,CAACM,UAAD,CAAxB;AACAjB,QAAAA,WAAW,GAAG,KAAd;AACH;AACJ;;AAEDkB,IAAAA,QAAQ,CAACM,gBAAT,CAA0B,OAA1B,EAAoCH,CAAD,IAAOD,YAAY,CAACC,CAAD,CAAtD;AAEA,WAAQ,MACR;AACII,MAAAA,MAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAqCL,CAAD,IAAOD,YAAY,CAACC,CAAD,CAAvD;AACH,KAHD;AAKH,GAxBQ,EAwBP,EAxBO,CAAT;AA2BA,sBACI;AAAK,IAAA,SAAS,EAAExC,KAAK,CAAC8C,WAAN,GAAoBhD,MAAM,CAACiD,mBAA3B,GAAiDjD,MAAM,CAACkD,aAAxE;AACK,IAAA,OAAO,EAAE,YAAY,MAAMhD,KAAK,CAACiD,UAAN,CAAiBhD,OAAjB,CADhC;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAEH,MAAM,CAACoD,cAAvB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACO,QAAA,WAAW,EAAC,iBADnB;AAEO,QAAA,YAAY,EAAElC,QAFrB;AAGO,QAAA,EAAE,EAAEf,OAHX;AAIO,QAAA,SAAS,EAAEH,MAAM,CAACsC,UAJzB;AAKO,QAAA,QAAQ,EAAE,MAAM;AAACjB,UAAAA,WAAW,GAAC,IAAZ;AAAkBG,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDtB,OAAjD,EAA0D,GAA1D,EAA+DkB,WAA/D;AAA4E;AALtH;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAErB,MAAM,CAAC+B,OAAvB;AAAgC,QAAA,OAAO,EAAE,MAAM;AAACA,UAAAA,OAAO;AAAIP,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAAkC,SAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAaI;AAAK,MAAA,SAAS,EAAEzB,MAAM,CAACqD,mBAAvB;AAAA,gBAGQC,MAAM,CAACC,IAAP,CAAYnD,IAAI,CAACoD,QAAjB,EAA2BC,GAA3B,CAA+B,CAACtB,WAAD,EAAcuB,KAAd,KAAwB;AAEnD;AAAA;AACI;AACA,kBAAC,QAAD;AAAU,YAAA,IAAI,EAAEtD,IAAI,CAACoD,QAAL,CAAcrB,WAAd,CAAhB;AACU,YAAA,WAAW,EAAIA,WADzB;AAGU,YAAA,cAAc,EAAED,qBAH1B;AAIU,YAAA,qBAAqB,EAAEE;AAJjC,aAEiBsB,KAFjB;AAAA;AAAA;AAAA;AAAA;AAFJ;AASH,OAXD;AAHR;AAAA;AAAA;AAAA;AAAA,YAbJ,EAgCIxD,KAAK,CAAC8C,WAAN,gBAAoB;AAAK,MAAA,SAAS,EAAEhD,MAAM,CAAC2D,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAApB,gBAAkF;AAAA;AAAA;AAAA;AAAA,YAhCtF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqCH;;GA1IQ1D,I;;KAAAA,I;AA4IT,eAAeA,IAAf","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Card.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect, useRef} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport TodoItem from '../components/TodoItem.js'\n\n\nimport cStyle from './style/Card.module.css';\n\n\nfunction Card(props) {\n    const {cardKey, card, addTodoItem, deleteTodoItem, updateTodoItemMessage, updateCardName} = props;\n    const [addState, setAddState] = useState(false);\n    const [textElem, setTextElem] = useState(null);\n    const [clicked, setClicked] = useState(false);\n    const [todo, setTodo] = useState(props.card.todo);\n    const todoRef = useRef(null);\n    const [cardName, setCardName] = useState(props.card.name);\n        \n    let inputEdited = false;\n\n\n    const switchColor = (elem) => {\n        console.log(\"fired once\");\n        if (elem.target.style.textDecoration == \"line-through\") {\n            console.log(\"clicked \", elem.target.style.textDecoration)\n            elem.target.style.textDecoration = \"\";\n            elem.target.style.backgroundColor = \"#ffffff\";\n            elem.target.style.color = \"#666668\";\n        }\n        else {\n            // elem.target.style.backgroundColor = \"#9ecd49\";\n            elem.target.style.color = \"#9ecd49\";\n            elem.target.style.textDecoration = \"line-through\";\n\n            // elem.target.style.border = \"#9ecd49 2px solid\"\n        }\n      \n\n    }\n\n    /*  addTodo()\n        Purpose:    calls addTodoItem and pass in cardKey\n        Effect:     Calls props function addTodoItem and pass in CardID\n        Parameters: none\n    */\n    const addTodo = () => {\n        addTodoItem(cardKey);\n    }\n\n \n\n    const updateCardNameWithTarget = (target) => {\n        console.log(\"cardjs updateCardNameWthTar targetval: \", target.value);\n        updateCardName(cardKey, target.value)\n    }\n\n\n    /*  deleteTodoItemWithKey()\n        Purpose:    calls deleteTodoItem and pass in cardKey\n        Effect:     Calls props function deleteTodoItem and pass in \n                    cardKey with received arguments todoItemKey\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n    */\n    const deleteTodoItemWithKey = (todoItemKey) => \n    {\n        deleteTodoItem(cardKey, todoItemKey);\n    }\n\n    /*  updateTodoItemMessageWithKey()\n        Purpose:    calls updateTodoItemMessage and pass in cardKey\n        Effect:     Calls props function updateTodoItemMessage and pass in \n                    cardKey with received arguments todoItemKey and message\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessageWithKey = (todoItemKey, message) => \n    {\n        updateTodoItemMessage(cardKey, todoItemKey, message);\n    }\n\n\n    useEffect(() =>\n    {\n        const titleInput = document.getElementById(cardKey);\n\n        /*  checks if the mouse is clicked outside of the provided target\n            then calls corresponding function within */\n        function checkOutside(e) \n        {\n            console.log(\"todoItem checkOutside called: \", inputEdited);\n            var clickedInsideInput = titleInput.contains(e.target);\n            if (inputEdited && !clickedInsideInput) {\n                console.log(\"TodoItem oh shet clicked outside\");\n                updateCardNameWithTarget(titleInput);\n                inputEdited = false;\n            }\n        }\n\n        document.addEventListener(\"click\", (e) => checkOutside(e));\n\n        return (() => \n        {\n            window.removeEventListener(\"click\", (e) => checkOutside(e));\n        })\n\n    },[])\n\n\n    return (\n        <div className={props.removeState ? cStyle.cardRemoveContainer : cStyle.cardContainer} \n             onClick={async () => await props.removeCard(cardKey)}>\n            <div className={cStyle.titleContainer}> \n                <input type=\"text\" \n                       placeholder=\"Enter a name...\" \n                       defaultValue={cardName} \n                       id={cardKey}\n                       className={cStyle.titleInput}\n                       onChange={() => {inputEdited=true; console.log(\"inputEdited Changed from CardJS: \", cardKey, \" \", inputEdited)}}/>\n                <div className={cStyle.addTodo} onClick={() => {addTodo(); console.log(\"add button clicked\")}}>＋</div>\n            </div>\n            \n\n            <div className={cStyle.scrollableContainer}> \n                \n                {\n                    Object.keys(card.todoList).map((todoItemKey, index) => {\n\n                        return (\n                            // console.log(\"card.js \")\n                            <TodoItem todo={card.todoList[todoItemKey]}\n                                      todoItemKey = {todoItemKey}\n                                      key = {index}\n                                      deleteTodoItem={deleteTodoItemWithKey}\n                                      updateTodoItemMessage={updateTodoItemMessageWithKey}>\n                                      </TodoItem>\n                        )\n                    })\n                }\n                \n                \n            </div>\n           {props.removeState ? <div className={cStyle.removeOverlay}>CLICK TO REMOVE</div> : <span></span>}\n        \n        </div>\n    );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}