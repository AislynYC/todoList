{"ast":null,"code":"var _jsxFileName = \"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js\",\n    _s = $RefreshSig$();\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\nimport { useState, useEffect } from 'react';\nimport Card from '../components/Card.js';\nimport tStyle from './style/Todo.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todo() {\n  _s();\n\n  const [key, setKey] = useState(1);\n  var cardsDefault = new Object();\n  cardsDefault = {\n    0: {\n      name: \"\",\n      todoList: {\n        0: \"\"\n      },\n      todoListKey: 1\n    }\n  };\n  const [cards, setCards] = useState(cardsDefault);\n  const [removeState, setRemoveState] = useState(false);\n  /*  addCard()\n      Purpose:    to add an additional card \n      Effect:     sets the state of \"remove\" to false, preventing users \n                  to add cards while remove state is on. Then makes a copy \n                  of card Object to set new c\n      Parameters: Object cardKey  - the identifier to the card that needs \n                                    needs to be altered\n  */\n\n  const addCard = async () => {\n    setRemoveState(false);\n    let tempCard = Object.assign({}, cards);\n    tempCard[key] = cardsDefault[0];\n    console.log(\"Todo addCard Cards: \", cards);\n    setCards(tempCard);\n    setKey(prev => prev + 1);\n    console.log(\"222Todo addCard Cards: \", cards); // setKey(prev => prev + 1);\n  };\n\n  const removeCard = cardKey => {\n    console.log(\"Todo removeCard cardkey: \", cardKey);\n\n    if (removeState) {\n      console.log(\"Todo removeCard cards b4: \", cards);\n      let tempCards = Object.assign({}, cards);\n      delete tempCards[cardKey];\n      setCards(tempCards);\n      console.log(\"Todo removeCard cards after: \", cards);\n    }\n  };\n  /*  addTodoItem()\n      Purpose:    to add an additional todoItem\n      Effect:     makes a copy of \"cards\" to add additional string value\n                  to the new key \"cards[cardKey].todoListKey\". Then increment\n                  cards[cardKey].todoListKey by 1. lastly, setCards with the \n                  mutated tempCards Object \n      Parameters: Object cardKey  - the identifier to the card that needs \n                                    needs to be altered\n  */\n\n\n  const addTodoItem = cardKey => {\n    let tempCards = Object.assign({}, cards);\n    /*  Adds new todoItem to the card */\n\n    tempCards[cardKey].todoList = { ...tempCards[cardKey].todoList,\n      [tempCards[cardKey].todoListKey]: \"\"\n    };\n    /* This increments the todoListKey by 1 to ensure adding todoItem is \n       added correctly each time */\n\n    tempCards[cardKey].todoListKey++;\n    setCards(tempCards);\n  };\n\n  useEffect(() => {\n    console.log(\"Todo UseEffeect cards: \", cards);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tStyle.todoContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.editsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: tStyle.addEvent,\n        onClick: addCard,\n        children: \"\\uFF0B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: tStyle.removeEvent,\n        onClick: () => {\n          console.log(removeState);\n          setRemoveState(!removeState);\n          console.log(removeState);\n        },\n        children: \"\\uFF0D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.cardsContainer,\n      children: Object.keys(cards).map((cardKey, index) => {\n        console.log(\"Todo.js cardKey: \", cardKey);\n        console.log(\"todojs objecke: \", Object.keys(cards));\n        return /*#__PURE__*/_jsxDEV(Card, {\n          removeCard: removeCard,\n          removeState: removeState,\n          card: cards[cardKey],\n          cardKey: cardKey,\n          addTodoItem: addTodoItem\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Todo, \"0jBX38r4zgDW49MkusjK/mS8nQ0=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js"],"names":["useState","useEffect","Card","tStyle","Todo","key","setKey","cardsDefault","Object","name","todoList","todoListKey","cards","setCards","removeState","setRemoveState","addCard","tempCard","assign","console","log","prev","removeCard","cardKey","tempCards","addTodoItem","todoContainer","editsContainer","addEvent","removeEvent","cardsContainer","keys","map","index"],"mappings":"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","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\n\n\nfunction Todo() {\n\n    \n    const [key, setKey] = useState(1);\n\n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n\n\n    const [cards, setCards] = useState(cardsDefault);\n\n    \n    const [removeState, setRemoveState] = useState(false);\n \n    \n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new c\n        Parameters: Object cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addCard = async() => {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = cardsDefault[0];\n\n        console.log(\"Todo addCard Cards: \", cards);\n\n        setCards(tempCard);\n        setKey(prev => prev + 1);\n        console.log(\"222Todo addCard Cards: \", cards);\n\n        // setKey(prev => prev + 1);\n    }\n\n    const removeCard = (cardKey) => { \n        console.log(\"Todo removeCard cardkey: \", cardKey);\n        if (removeState) \n        {\n            console.log(\"Todo removeCard cards b4: \", cards);\n            let tempCards = Object.assign({}, cards);\n           \n            delete tempCards[cardKey];\n            setCards(tempCards);\n            console.log(\"Todo removeCard cards after: \", cards);\n\n            \n        }\n    }\n    \n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: Object cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(tempCards);\n\n    }\n   \n    \n\n\n    useEffect(() => {\n        console.log(\"Todo UseEffeect cards: \" , cards);\n    }, [])\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <button className={tStyle.addEvent}\n                        onClick={addCard}>\n                    ＋\n                </button>\n                <button className={tStyle.removeEvent}\n                        onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}}>\n                    －\n                </button>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        console.log(\"Todo.js cardKey: \", cardKey);\n                        console.log(\"todojs objecke: \", Object.keys(cards));\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}></Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}