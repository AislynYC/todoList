{"ast":null,"code":"var _jsxFileName = \"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js\",\n    _s = $RefreshSig$();\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\nimport { useState, useEffect } from 'react';\nimport Card from '../components/Card.js';\nimport tStyle from './style/Todo.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todo() {\n  _s();\n\n  var cardsDefault = new Object();\n  cardsDefault = {\n    0: {\n      name: \"\",\n      todoList: {\n        0: \"\"\n      },\n      todoListKey: 1\n    }\n  };\n  const [cards, setCards] = useState(localStorage.getItem(\"storedCards\") || cardsDefault);\n  const [key, setKey] = useState(1);\n  const [removeState, setRemoveState] = useState(false);\n  /*  addCard()\n      Purpose:    to add an additional card \n      Effect:     sets the state of \"remove\" to false, preventing users \n                  to add cards while remove state is on. Then makes a copy \n                  of card Object to set new card by adding value of \n                  \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                  state.\n      Parameters: none\n  */\n\n  const addCard = () => {\n    setRemoveState(false);\n    let tempCard = Object.assign({}, cards);\n    tempCard[key] = Object.assign({}, cardsDefault[0]);\n    setCards(tempCard);\n    /*  increment key by 1 */\n\n    setKey(prev => prev + 1);\n  };\n  /*  removeCard()\n      Purpose:    to remove a card with given cardKey identifier\n      Effect:     On removeState being true, create a copy of cards Object \n                  to delete the identified card with given parameter cardKey.\n                  Then updates the state of cards. \n      Parameters: int cardKey - key to the card to be removed \n  */\n\n\n  const removeCard = cardKey => {\n    /* Ensures only delete card when removeState is on */\n    if (removeState) {\n      let tempCards = Object.assign({}, cards);\n      delete tempCards[cardKey];\n      setCards(prev => prev = tempCards);\n    }\n  };\n  /*  updateCardName()\n      Purpose:    to update name of specified card onChange\n      Effect:     Creates a copy of cards Object, then alter the name of \n                  specified card. \n      Parameters: int cardKey     - the identifier to the card\n                  string cardName  - the name to be saved\n  */\n\n\n  const updateCardName = (cardKey, cardName) => {\n    let tempCards = Object.assign({}, cards);\n    tempCards[cardKey].name = cardName;\n    setCards(prev => prev = tempCards);\n    console.log(\"todojs updateCardName: \", cards[cardKey].name);\n  };\n  /*  addTodoItem()\n      Purpose:    to add an additional todoItem\n      Effect:     makes a copy of \"cards\" to add additional string value\n                  to the new key \"cards[cardKey].todoListKey\". Then increment\n                  cards[cardKey].todoListKey by 1. lastly, setCards with the \n                  mutated tempCards Object \n      Parameters: int cardKey  - the identifier to the card that needs \n                                    needs to be altered\n  */\n\n\n  const addTodoItem = cardKey => {\n    let tempCards = Object.assign({}, cards);\n    /*  Adds new todoItem to the card */\n\n    tempCards[cardKey].todoList = { ...tempCards[cardKey].todoList,\n      [tempCards[cardKey].todoListKey]: \"\"\n    };\n    /* This increments the todoListKey by 1 to ensure adding todoItem is \n       added correctly each time */\n\n    tempCards[cardKey].todoListKey++;\n    setCards(prev => prev = tempCards);\n    console.log(\"todojs addTodoItem cards: \", cards);\n  };\n  /*  deleteTodoItem()\n      Purpose:    to delete a todoItem\n      Effect:     Only allows the deletion of a todoItem if the specified \n                  card has a todoItemList greater than 1. On true, creates \n                  a copy of cards Object to delete the todoItem of at given\n                  cardKey at given todoItemKey. finally, update state of \n                  cards. \n      Parameters: int cardKey     - the identifier to the card that contains \n                                    the todoItem\n                  int todoItemKey - the identifier to the todoItem that will\n                                    be deleted \n  */\n\n\n  const deleteTodoItem = async (cardKey, todoItemKey) => {\n    /*  Only deletes the todoItem if the card has todoItemList > 1 */\n    if (Object.keys(cards[cardKey].todoList).length > 1) {\n      let tempCards = Object.assign({}, cards);\n      console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n      console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n      console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n      delete tempCards[cardKey].todoList[todoItemKey];\n      console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n      setCards(prev => prev = tempCards);\n      console.log(\"todoJs deleteTodoItem cards: \", cards);\n      console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n    }\n  };\n  /*  updateTodoItemMessage()\n      Purpose:    to update todoItem Message onChange\n      Effect:     Creates a copy of cards Object to change the todoItem of at \n                  given cardKey of given todoItemKey. finally, update state \n                  of cards. \n      Parameters: int cardKey     - the identifier to the card that contains \n                                    the todoItem\n                  int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n                  string message  - the message that needs to be saved\n  */\n\n\n  const updateTodoItemMessage = (cardKey, todoItemKey, message) => {\n    let tempCards = Object.assign({}, cards);\n    tempCards[cardKey].todoList[todoItemKey] = message;\n    setCards(prev => prev = tempCards); // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"savedCards\", cards);\n    console.log(\"Todo UseEffeect cards: \", cards);\n  }, [cards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tStyle.todoContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.editsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: tStyle.addEvent,\n        onClick: addCard,\n        id: \"addCardButton\",\n        children: \"\\uFF0B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: tStyle.removeEvent,\n        onClick: () => {\n          console.log(removeState);\n          setRemoveState(!removeState);\n          console.log(removeState);\n        },\n        children: \"\\uFF0D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.cardsContainer,\n      children: Object.keys(cards).map((cardKey, index) => {\n        console.log(\"Todo.js cardKey: \", cardKey);\n        console.log(\"todojs objecke: \", Object.keys(cards));\n        return /*#__PURE__*/_jsxDEV(Card, {\n          removeCard: removeCard,\n          removeState: removeState,\n          card: cards[cardKey],\n          cardKey: cardKey,\n          addTodoItem: addTodoItem,\n          deleteTodoItem: deleteTodoItem,\n          updateTodoItemMessage: updateTodoItemMessage,\n          updateCardName: updateCardName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Todo, \"u6FFhUeY3QWV3kGQHXDArBqBJrE=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js"],"names":["useState","useEffect","Card","tStyle","Todo","cardsDefault","Object","name","todoList","todoListKey","cards","setCards","localStorage","getItem","key","setKey","removeState","setRemoveState","addCard","tempCard","assign","prev","removeCard","cardKey","tempCards","updateCardName","cardName","console","log","addTodoItem","deleteTodoItem","todoItemKey","keys","length","updateTodoItemMessage","message","setItem","todoContainer","editsContainer","addEvent","removeEvent","cardsContainer","map","index"],"mappings":"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","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\n\n\nfunction Todo() {\n\n    \n\n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n\n    const [cards, setCards] = useState(localStorage.getItem(\"storedCards\") || cardsDefault);\n    const [key, setKey] = useState(1);\n    const [removeState, setRemoveState] = useState(false);\n \n    \n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n    const addCard = () => \n    {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = Object.assign({}, cardsDefault[0]);\n\n        setCards(tempCard);\n        /*  increment key by 1 */\n        setKey(prev => prev + 1);\n\n    }\n\n\n    /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n    const removeCard = (cardKey) => \n    { \n        /* Ensures only delete card when removeState is on */\n        if (removeState) {\n            let tempCards = Object.assign({}, cards);\n           \n            delete tempCards[cardKey];\n            setCards(prev => prev = tempCards);\n            \n        }\n    }\n    \n    /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n    const updateCardName = (cardKey, cardName) => \n    {\n        let tempCards = Object.assign({}, cards);\n\n        tempCards[cardKey].name = cardName;\n\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs updateCardName: \", cards[cardKey].name );\n    }\n\n\n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => \n    {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs addTodoItem cards: \", cards);\n\n    }\n\n    \n   \n    /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n    const deleteTodoItem = async (cardKey, todoItemKey) => \n    {\n\n        /*  Only deletes the todoItem if the card has todoItemList > 1 */\n        if (Object.keys(cards[cardKey].todoList).length > 1) {\n            let tempCards = Object.assign({}, cards);\n            console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n            console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n\n            console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n            delete tempCards[cardKey].todoList[todoItemKey];\n            console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n\n            setCards(prev => prev = tempCards);\n            console.log(\"todoJs deleteTodoItem cards: \", cards);\n            console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n\n\n        }\n        \n    }\n    /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessage = (cardKey, todoItemKey, message) => \n    {\n        let tempCards = Object.assign({}, cards);\n        \n        tempCards[cardKey].todoList[todoItemKey] = message;\n\n        setCards(prev => prev = tempCards);\n        // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n    }\n\n\n\n    useEffect(() => {\n        localStorage.setItem(\"savedCards\", cards)\n\n        \n\n        console.log(\"Todo UseEffeect cards: \" , cards);\n    }, [cards])\n\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <button className={tStyle.addEvent}\n                        onClick={addCard}\n                        id=\"addCardButton\">\n                    ＋\n                </button>\n                <button className={tStyle.removeEvent}\n                        onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}}>\n                    －\n                </button>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        console.log(\"Todo.js cardKey: \", cardKey);\n                        console.log(\"todojs objecke: \", Object.keys(cards));\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}\n                                  deleteTodoItem={deleteTodoItem}\n                                  updateTodoItemMessage={updateTodoItemMessage}\n                                  updateCardName={updateCardName}>\n                                    \n                            </Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}