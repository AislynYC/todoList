{"ast":null,"code":"var _jsxFileName = \"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js\",\n    _s = $RefreshSig$();\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\nimport { useState, useEffect } from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\nimport Card from '../components/Card.js';\nimport tStyle from './style/Todo.module.css';\nimport Checkbox from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todo() {\n  _s();\n\n  var cardsDefault = new Object();\n  cardsDefault = {\n    0: {\n      name: \"\",\n      todoList: {\n        0: \"\"\n      },\n      todoListKey: 1\n    }\n  };\n  const checkSaveAction = localStorage.getItem(\"saveAction\") === \"true\";\n  console.log(\"checkSaveAction: \", checkSaveAction);\n  const [cards, setCards] = useState(cardsDefault);\n  const [key, setKey] = useState(1); // cardKey\n\n  const [removeState, setRemoveState] = useState(false);\n  const [saveList, setSaveList] = useState(true);\n\n  const onUnload = () => {\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n    localStorage.setItem(\"saveAction\", saveList);\n    localStorage.setItem(\"cardKey\", key);\n    alert(\"onUnloaded\");\n  };\n  /*  addCard()\n      Purpose:    to add an additional card \n      Effect:     sets the state of \"remove\" to false, preventing users \n                  to add cards while remove state is on. Then makes a copy \n                  of card Object to set new card by adding value of \n                  \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                  state.\n      Parameters: none\n  */\n\n\n  const addCard = () => {\n    setRemoveState(false);\n    let tempCard = Object.assign({}, cards);\n    tempCard[key] = Object.assign({}, cardsDefault[0]);\n    /*  increment key by 1 */\n\n    setKey(prev => prev + 1);\n    setCards(tempCard); // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  };\n  /*  removeCard()\n      Purpose:    to remove a card with given cardKey identifier\n      Effect:     On removeState being true, create a copy of cards Object \n                  to delete the identified card with given parameter cardKey.\n                  Then updates the state of cards. \n      Parameters: int cardKey - key to the card to be removed \n  */\n\n\n  const removeCard = cardKey => {\n    /* Ensures only delete card when removeState is on */\n    console.log(\"removeCard cardKey: \", cardKey);\n\n    if (removeState) {\n      let tempCards = Object.assign({}, cards);\n      delete tempCards[cardKey];\n      setCards(prev => prev = tempCards);\n    } // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n  };\n  /*  updateCardName()\n      Purpose:    to update name of specified card onChange\n      Effect:     Creates a copy of cards Object, then alter the name of \n                  specified card. \n      Parameters: int cardKey     - the identifier to the card\n                  string cardName  - the name to be saved\n  */\n\n\n  const updateCardName = (cardKey, cardName) => {\n    let tempCards = Object.assign({}, cards);\n    console.log(\"before updateCardName: \", tempCards);\n    tempCards[cardKey].name = cardName;\n    console.log(\"after updateCardName: \", tempCards);\n    setCards(prev => prev = tempCards);\n    console.log(\"todojs updateCardName: \", cards[cardKey].name); // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  };\n  /*  addTodoItem()\n      Purpose:    to add an additional todoItem\n      Effect:     makes a copy of \"cards\" to add additional string value\n                  to the new key \"cards[cardKey].todoListKey\". Then increment\n                  cards[cardKey].todoListKey by 1. lastly, setCards with the \n                  mutated tempCards Object \n      Parameters: int cardKey  - the identifier to the card that needs \n                                    needs to be altered\n  */\n\n\n  const addTodoItem = cardKey => {\n    let tempCards = Object.assign({}, cards);\n    /*  Adds new todoItem to the card */\n\n    tempCards[cardKey].todoList = { ...tempCards[cardKey].todoList,\n      [tempCards[cardKey].todoListKey]: \"\"\n    };\n    /* This increments the todoListKey by 1 to ensure adding todoItem is \n       added correctly each time */\n\n    tempCards[cardKey].todoListKey++;\n    setCards(prev => prev = tempCards);\n    console.log(\"todojs addTodoItem cards: \", cards); // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n  };\n  /*  deleteTodoItem()\n      Purpose:    to delete a todoItem\n      Effect:     Only allows the deletion of a todoItem if the specified \n                  card has a todoItemList greater than 1. On true, creates \n                  a copy of cards Object to delete the todoItem of at given\n                  cardKey at given todoItemKey. finally, update state of \n                  cards. \n      Parameters: int cardKey     - the identifier to the card that contains \n                                    the todoItem\n                  int todoItemKey - the identifier to the todoItem that will\n                                    be deleted \n  */\n\n\n  const deleteTodoItem = async (cardKey, todoItemKey) => {\n    /*  Only deletes the todoItem if the card has todoItemList > 1 */\n    if (Object.keys(cards[cardKey].todoList).length > 1) {\n      let tempCards = Object.assign({}, cards);\n      console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n      console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n      console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n      delete tempCards[cardKey].todoList[todoItemKey];\n      console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n      setCards(prev => prev = tempCards);\n      console.log(\"todoJs deleteTodoItem cards: \", cards);\n      console.log(\"todoJs deleteTodoItem tempCards: \", tempCards); // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n    }\n  };\n  /*  updateTodoItemMessage()\n      Purpose:    to update todoItem Message onChange\n      Effect:     Creates a copy of cards Object to change the todoItem of at \n                  given cardKey of given todoItemKey. finally, update state \n                  of cards. \n      Parameters: int cardKey     - the identifier to the card that contains \n                                    the todoItem\n                  int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n                  string message  - the message that needs to be saved\n  */\n\n\n  const updateTodoItemMessage = (cardKey, todoItemKey, message) => {\n    let tempCards = Object.assign({}, cards);\n    tempCards[cardKey].todoList[todoItemKey] = message;\n    setCards(prev => prev = tempCards);\n    localStorage.setItem(\"savedCards\", JSON.stringify(cards)); // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n  };\n\n  useEffect(() => {\n    const onUnload = () => {\n      localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n      localStorage.setItem(\"saveAction\", saveList);\n      localStorage.setItem(\"cardKey\", key);\n      alert(\"onUnloaded\");\n    };\n\n    if (checkSaveAction) {\n      setCards(JSON.parse(localStorage.getItem(\"savedCards\")));\n      setKey(parseInt(localStorage.getItem(\"cardKey\")));\n      console.log(\"Todojs UseEffect key: \", key);\n      console.log(\"Todojs UseEffect localStorage key: \", localStorage.getItem(\"cardKey\"));\n    }\n\n    localStorage.setItem(\"saveAction\", saveList);\n    window.addEventListener(\"beforeunload\", onUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", onUnload);\n    };\n  }, []);\n  useEffect(() => {\n    const addCardButton = document.getElementById(\"addCardButton\");\n    const removeCardButton = document.getElementById(\"removeCardButton\");\n\n    const updateRemoveState = () => {\n      setRemoveState(prev => !prev);\n    };\n\n    addCardButton.addEventListener(\"click\", addCard);\n    removeCardButton.addEventListener(\"click\", updateRemoveState);\n    console.log(\"Todo UseEffeect cards: \", cards);\n    return () => {\n      addCardButton.removeEventListener(\"click\", addCard);\n      removeCardButton.removeEventListener(\"click\", updateRemoveState);\n    };\n  }, [addCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tStyle.todoContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.editsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: tStyle.editButtons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: tStyle.addEvent // onClick={addCard}\n          ,\n          id: \"addCardButton\",\n          children: \"\\uFF0B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: tStyle.removeEvent,\n          id: \"removeCardButton\"\n          /* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */\n          ,\n          children: \"\\uFF0D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: tStyle.saveListContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"saveList\",\n          className: tStyle.saveCheckbox,\n          checked: saveList,\n          onChange: () => {\n            localStorage.setItem(\"saveAction\", !saveList);\n            setSaveList(prev => !prev);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this), \"Auto Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: tStyle.cardsContainer,\n      children: Object.keys(cards).map((cardKey, index) => {\n        console.log(\"Todo.js cardKey: \", cardKey);\n        console.log(\"todojs objecke: \", Object.keys(cards));\n        return /*#__PURE__*/_jsxDEV(Card, {\n          removeCard: removeCard,\n          removeState: removeState,\n          card: cards[cardKey],\n          cardKey: cardKey,\n          addTodoItem: addTodoItem,\n          deleteTodoItem: deleteTodoItem,\n          updateTodoItemMessage: updateTodoItemMessage,\n          updateCardName: updateCardName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Todo, \"zGn3Bd4dl5eDFwjNCQZuqLHVPg0=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js"],"names":["useState","useEffect","isCompositeComponent","Card","tStyle","Checkbox","Todo","cardsDefault","Object","name","todoList","todoListKey","checkSaveAction","localStorage","getItem","console","log","cards","setCards","key","setKey","removeState","setRemoveState","saveList","setSaveList","onUnload","setItem","JSON","stringify","alert","addCard","tempCard","assign","prev","removeCard","cardKey","tempCards","updateCardName","cardName","addTodoItem","deleteTodoItem","todoItemKey","keys","length","updateTodoItemMessage","message","parse","parseInt","window","addEventListener","removeEventListener","addCardButton","document","getElementById","removeCardButton","updateRemoveState","todoContainer","editsContainer","editButtons","addEvent","removeEvent","saveListContainer","saveCheckbox","cardsContainer","map","index"],"mappings":"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","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\nimport Checkbox from '@material-ui/core';\n\n\nfunction Todo() {\n\n    \n\n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n    const checkSaveAction = localStorage.getItem(\"saveAction\") === \"true\";\n    console.log(\"checkSaveAction: \", checkSaveAction);\n\n    \n    const [cards, setCards] = useState(cardsDefault);\n    const [key, setKey] = useState(1);                      // cardKey\n    const [removeState, setRemoveState] = useState(false);\n\n    const [saveList, setSaveList] = useState(true);\n\n\n    const onUnload = () =>\n    {\n            localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n            localStorage.setItem(\"saveAction\", saveList);\n            localStorage.setItem(\"cardKey\", key);\n            alert(\"onUnloaded\");\n    }\n\n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n    const addCard = () => \n    {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = Object.assign({}, cardsDefault[0]);\n        \n        /*  increment key by 1 */\n        setKey(prev => prev + 1);\n\n        setCards(tempCard);\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n    const removeCard = (cardKey) => \n    { \n        /* Ensures only delete card when removeState is on */\n        console.log(\"removeCard cardKey: \", cardKey);\n        if (removeState) {\n            let tempCards = Object.assign({}, cards);\n           \n            delete tempCards[cardKey];\n            setCards(prev => prev = tempCards);\n            \n        }\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n    }\n    \n    /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n    const updateCardName = (cardKey, cardName) => \n    {\n        let tempCards = Object.assign({}, cards);\n        console.log(\"before updateCardName: \", tempCards);\n\n        tempCards[cardKey].name = cardName;\n        console.log(\"after updateCardName: \", tempCards);\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs updateCardName: \", cards[cardKey].name );\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => \n    {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs addTodoItem cards: \", cards);\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n    \n   \n    /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n    const deleteTodoItem = async (cardKey, todoItemKey) => \n    {\n\n        /*  Only deletes the todoItem if the card has todoItemList > 1 */\n        if (Object.keys(cards[cardKey].todoList).length > 1) {\n            let tempCards = Object.assign({}, cards);\n            console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n            console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n\n            console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n            delete tempCards[cardKey].todoList[todoItemKey];\n            console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n\n            setCards(prev => prev = tempCards);\n            console.log(\"todoJs deleteTodoItem cards: \", cards);\n            console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n\n            // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n\n        }\n        \n    }\n    /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessage = (cardKey, todoItemKey, message) => \n    {\n        let tempCards = Object.assign({}, cards);\n        \n        tempCards[cardKey].todoList[todoItemKey] = message;\n\n        setCards(prev => prev = tempCards);\n        \n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n        // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n    }\n\n    useEffect(() => \n    {\n        const onUnload = () =>\n        {\n            localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n            localStorage.setItem(\"saveAction\", saveList);\n            localStorage.setItem(\"cardKey\", key);\n            alert(\"onUnloaded\");\n        }\n\n        if (checkSaveAction) {\n            setCards(JSON.parse(localStorage.getItem(\"savedCards\")));\n            setKey(parseInt(localStorage.getItem(\"cardKey\")));\n            console.log(\"Todojs UseEffect key: \", key);\n            console.log(\"Todojs UseEffect localStorage key: \", localStorage.getItem(\"cardKey\"));\n\n        }\n        localStorage.setItem(\"saveAction\", saveList);\n\n        window.addEventListener(\"beforeunload\", onUnload);\n\n        return(() => \n        {\n            window.removeEventListener(\"beforeunload\", onUnload);\n\n        })\n        \n    }, []);\n\n    useEffect(() => {\n\n       \n        const addCardButton = document.getElementById(\"addCardButton\");\n        const removeCardButton = document.getElementById(\"removeCardButton\");\n\n        \n        const updateRemoveState = () => \n        {\n            setRemoveState((prev) => !prev); \n        }\n        addCardButton.addEventListener(\"click\", addCard);\n        removeCardButton.addEventListener(\"click\", updateRemoveState);\n        \n        console.log(\"Todo UseEffeect cards: \" , cards);\n\n        return (() => \n        {\n            addCardButton.removeEventListener(\"click\", addCard);\n            removeCardButton.removeEventListener(\"click\", updateRemoveState);\n\n        });\n    }, [addCard])\n\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <div className={tStyle.editButtons}>\n                    <button className={tStyle.addEvent}\n                            // onClick={addCard}\n                            id=\"addCardButton\">\n                        ＋\n                    </button>\n                    <button className={tStyle.removeEvent}\n                            id=\"removeCardButton\"\n                            /* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */>\n                        －\n                    </button>\n                </div>\n                \n                <label className={tStyle.saveListContainer}>\n                    <input type=\"checkbox\" name=\"saveList\" className={tStyle.saveCheckbox} checked={saveList} onChange={() => {localStorage.setItem(\"saveAction\", !saveList); setSaveList((prev) => !prev);   }}/>\n                    Auto Save\n                </label>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        console.log(\"Todo.js cardKey: \", cardKey);\n                        console.log(\"todojs objecke: \", Object.keys(cards));\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}\n                                  deleteTodoItem={deleteTodoItem}\n                                  updateTodoItemMessage={updateTodoItemMessage}\n                                  updateCardName={updateCardName}>\n                                    \n                            </Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}