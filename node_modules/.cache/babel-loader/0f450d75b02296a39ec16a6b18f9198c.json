{"ast":null,"code":"var _jsxFileName = \"/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js\",\n    _s = $RefreshSig$();\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Card.js\n * \n * \n * \n * \n */\nimport { useState, useEffect, useRef } from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\nimport TodoItem from '../components/TodoItem.js';\nimport cStyle from './style/Card.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card(props) {\n  _s();\n\n  const {\n    cardKey,\n    card,\n    addTodoItem,\n    deleteTodoItem,\n    updateTodoItemMessage\n  } = props;\n  const [addState, setAddState] = useState(false);\n  const [textElem, setTextElem] = useState(null);\n  const [clicked, setClicked] = useState(false);\n  const [todo, setTodo] = useState(props.card.todo);\n  const todoRef = useRef(null);\n  const [cardName, setCardName] = useState(props.card.name);\n\n  const switchColor = elem => {\n    console.log(\"fired once\");\n\n    if (elem.target.style.textDecoration == \"line-through\") {\n      console.log(\"clicked \", elem.target.style.textDecoration);\n      elem.target.style.textDecoration = \"\";\n      elem.target.style.backgroundColor = \"#ffffff\";\n      elem.target.style.color = \"#666668\";\n    } else {\n      // elem.target.style.backgroundColor = \"#9ecd49\";\n      elem.target.style.color = \"#9ecd49\";\n      elem.target.style.textDecoration = \"line-through\"; // elem.target.style.border = \"#9ecd49 2px solid\"\n    }\n  };\n  /*  addTodo()\n      Purpose:    adds card \n      Effect:     Calls props function deleteTodoItem and pass in \n                  CardID with received arguments todoItemKey\n      Parameters: int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n  */\n\n\n  const addTodo = () => {\n    addTodoItem(cardKey);\n  };\n\n  const changeCardName = e => {\n    props.card.name = e.target.value;\n  };\n  /*  deleteTodoItemWithKey()\n      Purpose:    calls deleteTodoItem and pass in CardID\n      Effect:     Calls props function deleteTodoItem and pass in \n                  CardID with received arguments todoItemKey\n      Parameters: int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n  */\n\n\n  const deleteTodoItemWithKey = todoItemKey => {\n    deleteTodoItem(cardKey, todoItemKey);\n  };\n  /*  updateTodoItemMessageWithKey()\n      Purpose:    calls updateTodoItemMessage and pass in CardID\n      Effect:     Calls props function updateTodoItemMessage and pass in \n                  CardID with received arguments todoItemKey and message\n      Parameters: int todoItemKey - the identifier to the todoItem that will\n                                    be changed \n                  string message  - the message that needs to be saved\n  */\n\n\n  const updateTodoItemMessageWithKey = (todoItemKey, message) => {\n    updateTodoItemMessage(cardKey, todoItemKey, message);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.removeState ? cStyle.cardRemoveContainer : cStyle.cardContainer,\n    onClick: async () => await props.removeCard(cardKey),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: cStyle.titleContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a name...\",\n        value: cardName,\n        onChange: e => {\n          setCardName(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cStyle.addTodo,\n        onClick: () => {\n          addTodo();\n          console.log(\"add button clicked\");\n        },\n        children: \"\\uFF0B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cStyle.scrollableContainer,\n      children: Object.keys(card.todoList).map((todoItemKey, index) => {\n        return (\n          /*#__PURE__*/\n          // console.log(\"card.js \")\n          _jsxDEV(TodoItem, {\n            todo: card.todoList[todoItemKey],\n            todoItemKey: todoItemKey,\n            deleteTodoItem: deleteTodoItemWithKey,\n            updateTodoItemMessage: updateTodoItemMessageWithKey\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), props.removeState ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cStyle.removeOverlay,\n      children: \"CLICK TO REMOVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 95\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"0I8y9X2hNFPiA0cMyg8ZQB93ZCM=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Card.js"],"names":["useState","useEffect","useRef","isCompositeComponent","TodoItem","cStyle","Card","props","cardKey","card","addTodoItem","deleteTodoItem","updateTodoItemMessage","addState","setAddState","textElem","setTextElem","clicked","setClicked","todo","setTodo","todoRef","cardName","setCardName","name","switchColor","elem","console","log","target","style","textDecoration","backgroundColor","color","addTodo","changeCardName","e","value","deleteTodoItemWithKey","todoItemKey","updateTodoItemMessageWithKey","message","removeState","cardRemoveContainer","cardContainer","removeCard","titleContainer","scrollableContainer","Object","keys","todoList","map","index","removeOverlay"],"mappings":"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","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Card.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect, useRef} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport TodoItem from '../components/TodoItem.js'\n\n\nimport cStyle from './style/Card.module.css';\n\n\nfunction Card(props) {\n    const {cardKey, card, addTodoItem, deleteTodoItem, updateTodoItemMessage} = props;\n    const [addState, setAddState] = useState(false);\n    const [textElem, setTextElem] = useState(null);\n    const [clicked, setClicked] = useState(false);\n    const [todo, setTodo] = useState(props.card.todo);\n    const todoRef = useRef(null);\n    const [cardName, setCardName] = useState(props.card.name);\n        \n\n\n    const switchColor = (elem) => {\n        console.log(\"fired once\");\n        if (elem.target.style.textDecoration == \"line-through\") {\n            console.log(\"clicked \", elem.target.style.textDecoration)\n            elem.target.style.textDecoration = \"\";\n            elem.target.style.backgroundColor = \"#ffffff\";\n            elem.target.style.color = \"#666668\";\n        }\n        else {\n            // elem.target.style.backgroundColor = \"#9ecd49\";\n            elem.target.style.color = \"#9ecd49\";\n            elem.target.style.textDecoration = \"line-through\";\n\n            // elem.target.style.border = \"#9ecd49 2px solid\"\n        }\n      \n\n    }\n\n    /*  addTodo()\n        Purpose:    adds card \n        Effect:     Calls props function deleteTodoItem and pass in \n                    CardID with received arguments todoItemKey\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n    */\n    const addTodo = () => {\n        addTodoItem(cardKey);\n    }\n\n \n\n    const changeCardName = (e) => {\n        props.card.name = e.target.value;\n    }\n\n\n    /*  deleteTodoItemWithKey()\n        Purpose:    calls deleteTodoItem and pass in CardID\n        Effect:     Calls props function deleteTodoItem and pass in \n                    CardID with received arguments todoItemKey\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n    */\n    const deleteTodoItemWithKey = (todoItemKey) => \n    {\n        deleteTodoItem(cardKey, todoItemKey);\n    }\n\n    /*  updateTodoItemMessageWithKey()\n        Purpose:    calls updateTodoItemMessage and pass in CardID\n        Effect:     Calls props function updateTodoItemMessage and pass in \n                    CardID with received arguments todoItemKey and message\n        Parameters: int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessageWithKey = (todoItemKey, message) => \n    {\n        updateTodoItemMessage(cardKey, todoItemKey, message);\n    }\n\n    return (\n        <div className={props.removeState ? cStyle.cardRemoveContainer : cStyle.cardContainer} \n             onClick={async () => await props.removeCard(cardKey)}>\n            <div className={cStyle.titleContainer}> \n                <input type=\"text\" placeholder=\"Enter a name...\" value={cardName} onChange={(e) => {setCardName(e.target.value)}}/>\n                <div className={cStyle.addTodo} onClick={() => {addTodo(); console.log(\"add button clicked\")}}>＋</div>\n            </div>\n            \n\n            <div className={cStyle.scrollableContainer}> \n                \n                {\n                    Object.keys(card.todoList).map((todoItemKey, index) => {\n\n                        return (\n                            // console.log(\"card.js \")\n                            <TodoItem todo={card.todoList[todoItemKey]}\n                                      todoItemKey = {todoItemKey}\n                                      key = {index}\n                                      deleteTodoItem={deleteTodoItemWithKey}\n                                      updateTodoItemMessage={updateTodoItemMessageWithKey}>\n                                      </TodoItem>\n                        )\n                    })\n                }\n                \n                \n            </div>\n           {props.removeState ? <div className={cStyle.removeOverlay}>CLICK TO REMOVE</div> : <span></span>}\n        \n        </div>\n    );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}