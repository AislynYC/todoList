{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dumbcan/Desktop/todoList/todoList/todoList/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dumbcan/Desktop/todoList/todoList/todoList/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/dumbcan/Desktop/todoList/todoList/todoList/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/dumbcan/Desktop/todoList/todoList/todoList/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/dumbcan/Desktop/todoList/todoList/todoList/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */import{useState,useEffect}from'react';import{isCompositeComponent}from'react-dom/test-utils';import Card from'../components/Card.js';import tStyle from'./style/Todo.module.css';import Checkbox from'@material-ui/core';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Todo(){var cardsDefault=new Object();cardsDefault={0:{name:\"\",todoList:{0:\"\"},todoListKey:1}};var checkSaveAction=localStorage.getItem(\"saveAction\")===\"true\";console.log(\"checkSaveAction: \",checkSaveAction);var _useState=useState(cardsDefault),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),key=_useState4[0],setKey=_useState4[1];// cardKey\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),removeState=_useState6[0],setRemoveState=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),saveList=_useState8[0],setSaveList=_useState8[1];var updateLocal=function updateLocal(){localStorage.setItem(\"savedCards\",JSON.stringify(cards));localStorage.setItem(\"saveAction\",saveList);localStorage.setItem(\"cardKey\",key);console.log(\"updateLocal done\");};/*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */var addCard=function addCard(){setRemoveState(false);var tempCard=Object.assign({},cards);tempCard[key]=Object.assign({},cardsDefault[0]);/*  increment key by 1 */setKey(function(prev){return prev+1;});setCards(tempCard);updateLocal();// localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n};/*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */var removeCard=function removeCard(cardKey){/* Ensures only delete card when removeState is on */console.log(\"removeCard cardKey: \",cardKey);var tempCards=Object.assign({},cards);delete tempCards[cardKey];setCards(function(prev){return prev=tempCards;});updateLocal();// localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n};/*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */var updateCardName=function updateCardName(cardKey,cardName){var tempCards=Object.assign({},cards);console.log(\"before updateCardName: \",tempCards);tempCards[cardKey].name=cardName;console.log(\"after updateCardName: \",tempCards);setCards(function(prev){return prev=tempCards;});console.log(\"todojs updateCardName: \",cards[cardKey].name);updateLocal();// localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n};/*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */var addTodoItem=function addTodoItem(cardKey){var tempCards=Object.assign({},cards);/*  Adds new todoItem to the card */tempCards[cardKey].todoList=_objectSpread(_objectSpread({},tempCards[cardKey].todoList),{},_defineProperty({},tempCards[cardKey].todoListKey,\"\"));/* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */tempCards[cardKey].todoListKey++;setCards(function(prev){return prev=tempCards;});console.log(\"todojs addTodoItem cards: \",cards);updateLocal();// localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n};/*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */var deleteTodoItem=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(cardKey,todoItemKey){var tempCards;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:/*  Only deletes the todoItem if the card has todoItemList > 1 */if(Object.keys(cards[cardKey].todoList).length>1){tempCards=Object.assign({},cards);console.log(\"todoJs deleteTodoItem todoList: \",tempCards[cardKey].todoList);console.log(\"todoJs deleteTodoItem todoItemKey: \",todoItemKey);console.log(\"todoJs deleteTodoItem: b4 \",tempCards[cardKey].todoList[todoItemKey]);delete tempCards[cardKey].todoList[todoItemKey];console.log(\"todoJs deleteTodoItem: after \",tempCards[cardKey].todoList[todoItemKey]);setCards(function(prev){return prev=tempCards;});console.log(\"todoJs deleteTodoItem cards: \",cards);console.log(\"todoJs deleteTodoItem tempCards: \",tempCards);updateLocal();// localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n}case 1:case\"end\":return _context.stop();}}},_callee);}));return function deleteTodoItem(_x,_x2){return _ref.apply(this,arguments);};}();/*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */var updateTodoItemMessage=function updateTodoItemMessage(cardKey,todoItemKey,message){var tempCards=Object.assign({},cards);tempCards[cardKey].todoList[todoItemKey]=message;setCards(function(prev){return prev=tempCards;});localStorage.setItem(\"savedCards\",JSON.stringify(cards));updateLocal();// console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n};useEffect(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!checkSaveAction){_context2.next=6;break;}_context2.next=3;return setCards(JSON.parse(localStorage.getItem(\"savedCards\")));case 3:setKey(parseInt(localStorage.getItem(\"cardKey\")));console.log(\"Todojs UseEffect key: \",key);console.log(\"Todojs UseEffect localStorage key: \",localStorage.getItem(\"cardKey\"));case 6:localStorage.setItem(\"saveAction\",saveList);case 7:case\"end\":return _context2.stop();}}},_callee2);})),[]);useEffect(function(){var addCardButton=document.getElementById(\"addCardButton\");var removeCardButton=document.getElementById(\"removeCardButton\");var updateRemoveState=function updateRemoveState(){setRemoveState(function(prev){return!prev;});};addCardButton.addEventListener(\"click\",addCard);removeCardButton.addEventListener(\"click\",updateRemoveState);console.log(\"Todo UseEffeect cards: \",cards);return function(){addCardButton.removeEventListener(\"click\",addCard);removeCardButton.removeEventListener(\"click\",updateRemoveState);};},[addCard]);return/*#__PURE__*/_jsxs(\"div\",{className:tStyle.todoContainer,children:[/*#__PURE__*/_jsxs(\"div\",{className:tStyle.editsContainer,children:[/*#__PURE__*/_jsxs(\"div\",{className:tStyle.editButtons,children:[/*#__PURE__*/_jsx(\"button\",{className:tStyle.addEvent// onClick={addCard}\n,id:\"addCardButton\",children:\"\\uFF0B\"}),/*#__PURE__*/_jsx(\"button\",{className:tStyle.removeEvent,id:\"removeCardButton\"/* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */,children:\"\\uFF0D\"})]}),/*#__PURE__*/_jsxs(\"label\",{className:tStyle.saveListContainer,children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"saveList\",className:tStyle.saveCheckbox,checked:saveList,onChange:function onChange(){localStorage.setItem(\"saveAction\",!saveList);setSaveList(function(prev){return!prev;});}}),\"Auto Save\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:tStyle.cardsContainer,children:Object.keys(cards).map(function(cardKey,index){console.log(\"Todo.js cardKey: \",cardKey);console.log(\"todojs objecke: \",Object.keys(cards));return/*#__PURE__*/_jsx(Card,{removeCard:removeCard,removeState:removeState,card:cards[cardKey],cardKey:cardKey,addTodoItem:addTodoItem,deleteTodoItem:deleteTodoItem,updateTodoItemMessage:updateTodoItemMessage,updateCardName:updateCardName},index);})})]});}export default Todo;","map":{"version":3,"sources":["/Users/dumbcan/Desktop/todoList/todoList/todoList/src/components/Todo.js"],"names":["useState","useEffect","isCompositeComponent","Card","tStyle","Checkbox","Todo","cardsDefault","Object","name","todoList","todoListKey","checkSaveAction","localStorage","getItem","console","log","cards","setCards","key","setKey","removeState","setRemoveState","saveList","setSaveList","updateLocal","setItem","JSON","stringify","addCard","tempCard","assign","prev","removeCard","cardKey","tempCards","updateCardName","cardName","addTodoItem","deleteTodoItem","todoItemKey","keys","length","updateTodoItemMessage","message","parse","parseInt","addCardButton","document","getElementById","removeCardButton","updateRemoveState","addEventListener","removeEventListener","todoContainer","editsContainer","editButtons","addEvent","removeEvent","saveListContainer","saveCheckbox","cardsContainer","map","index"],"mappings":"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","sourcesContent":["/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Todo.js\n * \n * \n * \n * \n */\n\n\nimport {useState, useEffect} from 'react';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nimport Card from '../components/Card.js'\nimport tStyle from './style/Todo.module.css';\nimport Checkbox from '@material-ui/core';\n\n\nfunction Todo() {\n\n    \n\n    var cardsDefault = new Object();\n    cardsDefault = {\n        0: {\n            name: \"\",\n            todoList: {\n                0: \"\",\n            },\n            todoListKey: 1,\n        }, \n        \n    };\n\n    const checkSaveAction = localStorage.getItem(\"saveAction\") === \"true\";\n    console.log(\"checkSaveAction: \", checkSaveAction);\n\n    \n    const [cards, setCards] = useState(cardsDefault);\n    const [key, setKey] = useState(1);                      // cardKey\n    const [removeState, setRemoveState] = useState(false);\n\n    const [saveList, setSaveList] = useState(true);\n\n\n    const updateLocal = () =>\n    {\n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n        localStorage.setItem(\"saveAction\", saveList);\n        localStorage.setItem(\"cardKey\", key);\n        console.log(\"updateLocal done\");\n            \n    }\n\n\n    /*  addCard()\n        Purpose:    to add an additional card \n        Effect:     sets the state of \"remove\" to false, preventing users \n                    to add cards while remove state is on. Then makes a copy \n                    of card Object to set new card by adding value of \n                    \"cardsDefault[0]\" with key \"key.\" finaly, increment key \n                    state.\n        Parameters: none\n    */\n    const addCard = () => \n    {\n\n        setRemoveState(false);\n        \n        let tempCard = Object.assign({}, cards);\n        tempCard[key] = Object.assign({}, cardsDefault[0]);\n        \n        /*  increment key by 1 */\n        setKey(prev => prev + 1);\n\n        setCards(tempCard);\n\n        updateLocal();\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  removeCard()\n        Purpose:    to remove a card with given cardKey identifier\n        Effect:     On removeState being true, create a copy of cards Object \n                    to delete the identified card with given parameter cardKey.\n                    Then updates the state of cards. \n        Parameters: int cardKey - key to the card to be removed \n    */\n    const removeCard = (cardKey) => \n    { \n        /* Ensures only delete card when removeState is on */\n        console.log(\"removeCard cardKey: \", cardKey);\n\n        let tempCards = Object.assign({}, cards);\n           \n        delete tempCards[cardKey];\n        setCards(prev => prev = tempCards);\n            \n\n\n        updateLocal();\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n    }\n    \n    /*  updateCardName()\n        Purpose:    to update name of specified card onChange\n        Effect:     Creates a copy of cards Object, then alter the name of \n                    specified card. \n        Parameters: int cardKey     - the identifier to the card\n                    string cardName  - the name to be saved\n    */\n    const updateCardName = (cardKey, cardName) => \n    {\n        let tempCards = Object.assign({}, cards);\n        console.log(\"before updateCardName: \", tempCards);\n\n        tempCards[cardKey].name = cardName;\n        console.log(\"after updateCardName: \", tempCards);\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs updateCardName: \", cards[cardKey].name );\n\n        updateLocal();\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n\n    /*  addTodoItem()\n        Purpose:    to add an additional todoItem\n        Effect:     makes a copy of \"cards\" to add additional string value\n                    to the new key \"cards[cardKey].todoListKey\". Then increment\n                    cards[cardKey].todoListKey by 1. lastly, setCards with the \n                    mutated tempCards Object \n        Parameters: int cardKey  - the identifier to the card that needs \n                                      needs to be altered\n    */\n    const addTodoItem = (cardKey) => \n    {\n        \n        let tempCards = Object.assign({}, cards);\n\n        /*  Adds new todoItem to the card */\n        tempCards[cardKey].todoList = {\n            ...tempCards[cardKey].todoList,\n            [tempCards[cardKey].todoListKey] : \"\",\n        }\n        \n        /* This increments the todoListKey by 1 to ensure adding todoItem is \n           added correctly each time */\n        tempCards[cardKey].todoListKey++;\n        setCards(prev => prev = tempCards);\n        console.log(\"todojs addTodoItem cards: \", cards);\n\n        updateLocal();\n\n        // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n    }\n\n    \n   \n    /*  deleteTodoItem()\n        Purpose:    to delete a todoItem\n        Effect:     Only allows the deletion of a todoItem if the specified \n                    card has a todoItemList greater than 1. On true, creates \n                    a copy of cards Object to delete the todoItem of at given\n                    cardKey at given todoItemKey. finally, update state of \n                    cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be deleted \n    */\n    const deleteTodoItem = async (cardKey, todoItemKey) => \n    {\n\n        /*  Only deletes the todoItem if the card has todoItemList > 1 */\n        if (Object.keys(cards[cardKey].todoList).length > 1) {\n            let tempCards = Object.assign({}, cards);\n            console.log(\"todoJs deleteTodoItem todoList: \", tempCards[cardKey].todoList);\n            console.log(\"todoJs deleteTodoItem todoItemKey: \", todoItemKey);\n\n            console.log(\"todoJs deleteTodoItem: b4 \", tempCards[cardKey].todoList[todoItemKey]);\n            delete tempCards[cardKey].todoList[todoItemKey];\n            console.log(\"todoJs deleteTodoItem: after \", tempCards[cardKey].todoList[todoItemKey]);\n\n            setCards(prev => prev = tempCards);\n            console.log(\"todoJs deleteTodoItem cards: \", cards);\n            console.log(\"todoJs deleteTodoItem tempCards: \", tempCards);\n\n            updateLocal();\n\n            // localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n\n\n        }\n        \n    }\n    /*  updateTodoItemMessage()\n        Purpose:    to update todoItem Message onChange\n        Effect:     Creates a copy of cards Object to change the todoItem of at \n                    given cardKey of given todoItemKey. finally, update state \n                    of cards. \n        Parameters: int cardKey     - the identifier to the card that contains \n                                      the todoItem\n                    int todoItemKey - the identifier to the todoItem that will\n                                      be changed \n                    string message  - the message that needs to be saved\n    */\n    const updateTodoItemMessage = (cardKey, todoItemKey, message) => \n    {\n        let tempCards = Object.assign({}, cards);\n        \n        tempCards[cardKey].todoList[todoItemKey] = message;\n\n        setCards(prev => prev = tempCards);\n        \n        localStorage.setItem(\"savedCards\", JSON.stringify(cards));\n\n        updateLocal();\n\n        // console.log(\"Todojs updateTodoItemMessage card message: \", cards[cardKey].todoList[todoItemKey])\n    }\n\n    useEffect(async() => \n    {\n       \n        if (checkSaveAction) {\n            await setCards(JSON.parse(localStorage.getItem(\"savedCards\")));\n            setKey(parseInt(localStorage.getItem(\"cardKey\")));\n            console.log(\"Todojs UseEffect key: \", key);\n            console.log(\"Todojs UseEffect localStorage key: \", localStorage.getItem(\"cardKey\"));\n\n        }\n        localStorage.setItem(\"saveAction\", saveList);\n\n        \n        \n    }, []);\n\n    useEffect(() => {\n\n       \n        const addCardButton = document.getElementById(\"addCardButton\");\n        const removeCardButton = document.getElementById(\"removeCardButton\");\n\n        \n        const updateRemoveState = () => \n        {\n            setRemoveState((prev) => !prev); \n        }\n        addCardButton.addEventListener(\"click\", addCard);\n        removeCardButton.addEventListener(\"click\", updateRemoveState);\n        \n        console.log(\"Todo UseEffeect cards: \" , cards);\n\n        return (() => \n        {\n            addCardButton.removeEventListener(\"click\", addCard);\n            removeCardButton.removeEventListener(\"click\", updateRemoveState);\n\n        });\n    }, [addCard])\n\n\n    return (\n        <div className={tStyle.todoContainer}>\n            <div className={tStyle.editsContainer}>\n                <div className={tStyle.editButtons}>\n                    <button className={tStyle.addEvent}\n                            // onClick={addCard}\n                            id=\"addCardButton\">\n                        ＋\n                    </button>\n                    <button className={tStyle.removeEvent}\n                            id=\"removeCardButton\"\n                            /* onClick={() => {console.log(removeState); setRemoveState(!removeState); console.log(removeState)}} */>\n                        －\n                    </button>\n                </div>\n                \n                <label className={tStyle.saveListContainer}>\n                    <input type=\"checkbox\" name=\"saveList\" className={tStyle.saveCheckbox} checked={saveList} onChange={() => {localStorage.setItem(\"saveAction\", !saveList); setSaveList((prev) => !prev);   }}/>\n                    Auto Save\n                </label>\n            </div>\n\n            <div className={tStyle.cardsContainer}> \n            \n                {\n                    \n                    Object.keys(cards).map((cardKey, index) => {\n                        console.log(\"Todo.js cardKey: \", cardKey);\n                        console.log(\"todojs objecke: \", Object.keys(cards));\n                        return (\n                            <Card removeCard = {removeCard}\n                                  removeState = {removeState} \n                                  card = {cards[cardKey]}\n                                  cardKey = {cardKey}\n                                  addTodoItem={addTodoItem}\n                                  key={index}\n                                  deleteTodoItem={deleteTodoItem}\n                                  updateTodoItemMessage={updateTodoItemMessage}\n                                  updateCardName={updateCardName}>\n                                    \n                            </Card>\n                        )\n                    })\n                }\n             \n                \n            </div>\n\n        </div>\n    );\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}